//-----------------------------------------------------------------------------
#ifndef OPENGLTYPES_H
#define OPENGLTYPES_H

#if defined(_WIN32)
#include <windows.h>
#include <wingdi.h>
#elif defined(__linux__)
#include <gl/glx.h>
#endif
#include <gl/gl.h>

#include "types.h"

//-----------------------------------------------------------------------------
#undef TRUE
#undef FALSE
#undef NO_ERROR
#undef RGB
#undef BOOL
#undef WAIT_FAILED

#if defined(_WIN32)
#define GL_GET_EXTENSION wglGetProcAddress
#elif defined(__linux__)
#define GL_GET_EXTENSION glXGetProcAddress
#endif

#define LOAD_GL_EXTENSION(var, status, type, fcore, farb, fext)\
  var = reinterpret_cast<type>(GL_GET_EXTENSION(fcore)); status = NOpenGLProc::TYPE_CORE;\
  if(!var) { var = reinterpret_cast<type>(GL_GET_EXTENSION(farb)); status = NOpenGLProc::TYPE_ARB; }\
  if(!var) { var = reinterpret_cast<type>(GL_GET_EXTENSION(fext)); status = NOpenGLProc::TYPE_EXT; }\
  if(!var) status = NOpenGLProc::TYPE_NOT_LOADED;
//-----------------------------------------------------------------------------
//typedef void            GLvoid;
//typedef uint32          GLenum;
//typedef uint8           GLboolean;
//typedef uint32          GLbitfield;
typedef char            GLchar;
//typedef int8            GLbyte;
//typedef int16           GLshort;
//typedef int32           GLint;
typedef int64           GLint64;
//typedef int32           GLsizei;
typedef uchar           GLuchar;
//typedef uint8           GLubyte;
//typedef uint16          GLushort;
//typedef uint32          GLuint;
typedef uint64          GLuint64;
//typedef float           GLfloat;
//typedef float           GLclampf;
//typedef float           GLclampd;
//typedef double          GLdouble;
//typedef double          GLclampd;
typedef int32           GLfixed;
typedef int32           GLclampx;
typedef int32           GLintptr;
typedef int32           GLsizeiptr;
typedef struct __GLsync *GLsync;
//-----------------------------------------------------------------------------
namespace NOpenGL
{
  // GL_VERSION_1_0
  static const GLuint ALPHA = 0x1906;
  static const GLuint ALWAYS = 0x0207;
  static const GLuint AND = 0x1501;
  static const GLuint AND_INVERTED = 0x1504;
  static const GLuint AND_REVERSE = 0x1502;
  static const GLuint BACK = 0x0405;
  static const GLuint BACK_LEFT = 0x0402;
  static const GLuint BACK_RIGHT = 0x0403;
  static const GLuint BLEND = 0x0BE2;
  static const GLuint BLEND_DST = 0x0BE0;
  static const GLuint BLEND_SRC = 0x0BE1;
  static const GLuint BLUE = 0x1905;
  static const GLuint BYTE = 0x1400;
  static const GLuint CCW = 0x0901;
  static const GLuint CLEAR = 0x1500;
  static const GLuint COLOR = 0x1800;
  static const GLuint COLOR_BUFFER_BIT = 0x00004000;
  static const GLuint COLOR_CLEAR_VALUE = 0x0C22;
  static const GLuint COLOR_LOGIC_OP = 0x0BF2;
  static const GLuint COLOR_WRITEMASK = 0x0C23;
  static const GLuint COPY = 0x1503;
  static const GLuint COPY_INVERTED = 0x150C;
  static const GLuint CULL_FACE = 0x0B44;
  static const GLuint CULL_FACE_MODE = 0x0B45;
  static const GLuint CW = 0x0900;
  static const GLuint DECR = 0x1E03;
  static const GLuint DEPTH = 0x1801;
  static const GLuint DEPTH_BUFFER_BIT = 0x00000100;
  static const GLuint DEPTH_CLEAR_VALUE = 0x0B73;
  static const GLuint DEPTH_COMPONENT = 0x1902;
  static const GLuint DEPTH_FUNC = 0x0B74;
  static const GLuint DEPTH_RANGE = 0x0B70;
  static const GLuint DEPTH_TEST = 0x0B71;
  static const GLuint DEPTH_WRITEMASK = 0x0B72;
  static const GLuint DITHER = 0x0BD0;
  static const GLuint DONT_CARE = 0x1100;
  static const GLuint DOUBLE = 0x140A;
  static const GLuint DOUBLEBUFFER = 0x0C32;
  static const GLuint DRAW_BUFFER = 0x0C01;
  static const GLuint DST_ALPHA = 0x0304;
  static const GLuint DST_COLOR = 0x0306;
  static const GLuint EQUAL = 0x0202;
  static const GLuint EQUIV = 0x1509;
  static const GLuint EXTENSIONS = 0x1F03;
  static const GLuint FALSE = 0;
  static const GLuint FASTEST = 0x1101;
  static const GLuint FILL = 0x1B02;
  static const GLuint FLOAT = 0x1406;
  static const GLuint FRONT = 0x0404;
  static const GLuint FRONT_AND_BACK = 0x0408;
  static const GLuint FRONT_FACE = 0x0B46;
  static const GLuint FRONT_LEFT = 0x0400;
  static const GLuint FRONT_RIGHT = 0x0401;
  static const GLuint GEQUAL = 0x0206;
  static const GLuint GREATER = 0x0204;
  static const GLuint GREEN = 0x1904;
  static const GLuint INCR = 0x1E02;
  static const GLuint INT = 0x1404;
  static const GLuint INVALID_ENUM = 0x0500;
  static const GLuint INVALID_OPERATION = 0x0502;
  static const GLuint INVALID_VALUE = 0x0501;
  static const GLuint INVERT = 0x150A;
  static const GLuint KEEP = 0x1E00;
  static const GLuint LEFT = 0x0406;
  static const GLuint LEQUAL = 0x0203;
  static const GLuint LESS = 0x0201;
  static const GLuint LINE = 0x1B01;
  static const GLuint LINEAR = 0x2601;
  static const GLuint LINEAR_MIPMAP_LINEAR = 0x2703;
  static const GLuint LINEAR_MIPMAP_NEAREST = 0x2701;
  static const GLuint LINES = 0x0001;
  static const GLuint LINE_LOOP = 0x0002;
  static const GLuint LINE_SMOOTH = 0x0B20;
  static const GLuint LINE_SMOOTH_HINT = 0x0C52;
  static const GLuint LINE_STRIP = 0x0003;
  static const GLuint LINE_WIDTH = 0x0B21;
  static const GLuint LINE_WIDTH_GRANULARITY = 0x0B23;
  static const GLuint LINE_WIDTH_RANGE = 0x0B22;
  static const GLuint LOGIC_OP_MODE = 0x0BF0;
  static const GLuint MAX_TEXTURE_SIZE = 0x0D33;
  static const GLuint MAX_VIEWPORT_DIMS = 0x0D3A;
  static const GLuint NAND = 0x150E;
  static const GLuint NEAREST = 0x2600;
  static const GLuint NEAREST_MIPMAP_LINEAR = 0x2702;
  static const GLuint NEAREST_MIPMAP_NEAREST = 0x2700;
  static const GLuint NEVER = 0x0200;
  static const GLuint NICEST = 0x1102;
  static const GLuint NONE = 0;
  static const GLuint NOOP = 0x1505;
  static const GLuint NOR = 0x1508;
  static const GLuint NOTEQUAL = 0x0205;
  static const GLuint NO_ERROR = 0;
  static const GLuint ONE = 1;
  static const GLuint ONE_MINUS_DST_ALPHA = 0x0305;
  static const GLuint ONE_MINUS_DST_COLOR = 0x0307;
  static const GLuint ONE_MINUS_SRC_ALPHA = 0x0303;
  static const GLuint ONE_MINUS_SRC_COLOR = 0x0301;
  static const GLuint OR = 0x1507;
  static const GLuint OR_INVERTED = 0x150D;
  static const GLuint OR_REVERSE = 0x150B;
  static const GLuint OUT_OF_MEMORY = 0x0505;
  static const GLuint PACK_ALIGNMENT = 0x0D05;
  static const GLuint PACK_LSB_FIRST = 0x0D01;
  static const GLuint PACK_ROW_LENGTH = 0x0D02;
  static const GLuint PACK_SKIP_PIXELS = 0x0D04;
  static const GLuint PACK_SKIP_ROWS = 0x0D03;
  static const GLuint PACK_SWAP_BYTES = 0x0D00;
  static const GLuint POINT = 0x1B00;
  static const GLuint POINTS = 0x0000;
  static const GLuint POINT_SIZE = 0x0B11;
  static const GLuint POINT_SIZE_GRANULARITY = 0x0B13;
  static const GLuint POINT_SIZE_RANGE = 0x0B12;
  static const GLuint POLYGON_MODE = 0x0B40;
  static const GLuint POLYGON_OFFSET_FACTOR = 0x8038;
  static const GLuint POLYGON_OFFSET_FILL = 0x8037;
  static const GLuint POLYGON_OFFSET_LINE = 0x2A02;
  static const GLuint POLYGON_OFFSET_POINT = 0x2A01;
  static const GLuint POLYGON_OFFSET_UNITS = 0x2A00;
  static const GLuint POLYGON_SMOOTH = 0x0B41;
  static const GLuint POLYGON_SMOOTH_HINT = 0x0C53;
  static const GLuint PROXY_TEXTURE_1D = 0x8063;
  static const GLuint PROXY_TEXTURE_2D = 0x8064;
  static const GLuint QUADS = 0x0007;
  static const GLuint READ_BUFFER = 0x0C02;
  static const GLuint RED = 0x1903;
  static const GLuint RENDERER = 0x1F01;
  static const GLuint REPEAT = 0x2901;
  static const GLuint REPLACE = 0x1E01;
  static const GLuint RGB = 0x1907;
  static const GLuint RGBA = 0x1908;
  static const GLuint RIGHT = 0x0407;
  static const GLuint SCISSOR_BOX = 0x0C10;
  static const GLuint SCISSOR_TEST = 0x0C11;
  static const GLuint SET = 0x150F;
  static const GLuint SHORT = 0x1402;
  static const GLuint SRC_ALPHA = 0x0302;
  static const GLuint SRC_ALPHA_SATURATE = 0x0308;
  static const GLuint SRC_COLOR = 0x0300;
  static const GLuint STACK_OVERFLOW = 0x0503;
  static const GLuint STACK_UNDERFLOW = 0x0504;
  static const GLuint STENCIL = 0x1802;
  static const GLuint STENCIL_BUFFER_BIT = 0x00000400;
  static const GLuint STENCIL_CLEAR_VALUE = 0x0B91;
  static const GLuint STENCIL_FAIL = 0x0B94;
  static const GLuint STENCIL_FUNC = 0x0B92;
  static const GLuint STENCIL_INDEX = 0x1901;
  static const GLuint STENCIL_PASS_DEPTH_FAIL = 0x0B95;
  static const GLuint STENCIL_PASS_DEPTH_PASS = 0x0B96;
  static const GLuint STENCIL_REF = 0x0B97;
  static const GLuint STENCIL_TEST = 0x0B90;
  static const GLuint STENCIL_VALUE_MASK = 0x0B93;
  static const GLuint STENCIL_WRITEMASK = 0x0B98;
  static const GLuint STEREO = 0x0C33;
  static const GLuint SUBPIXEL_BITS = 0x0D50;
  static const GLuint TEXTURE = 0x1702;
  static const GLuint TEXTURE_1D = 0x0DE0;
  static const GLuint TEXTURE_2D = 0x0DE1;
  static const GLuint TEXTURE_ALPHA_SIZE = 0x805F;
  static const GLuint TEXTURE_BLUE_SIZE = 0x805E;
  static const GLuint TEXTURE_BORDER_COLOR = 0x1004;
  static const GLuint TEXTURE_GREEN_SIZE = 0x805D;
  static const GLuint TEXTURE_HEIGHT = 0x1001;
  static const GLuint TEXTURE_MAG_FILTER = 0x2800;
  static const GLuint TEXTURE_MIN_FILTER = 0x2801;
  static const GLuint TEXTURE_RED_SIZE = 0x805C;
  static const GLuint TEXTURE_WIDTH = 0x1000;
  static const GLuint TEXTURE_WRAP_S = 0x2802;
  static const GLuint TEXTURE_WRAP_T = 0x2803;
  static const GLuint TRIANGLES = 0x0004;
  static const GLuint TRIANGLE_FAN = 0x0006;
  static const GLuint TRIANGLE_STRIP = 0x0005;
  static const GLuint TRUE = 1;
  static const GLuint UNPACK_ALIGNMENT = 0x0CF5;
  static const GLuint UNPACK_LSB_FIRST = 0x0CF1;
  static const GLuint UNPACK_ROW_LENGTH = 0x0CF2;
  static const GLuint UNPACK_SKIP_PIXELS = 0x0CF4;
  static const GLuint UNPACK_SKIP_ROWS = 0x0CF3;
  static const GLuint UNPACK_SWAP_BYTES = 0x0CF0;
  static const GLuint UNSIGNED_BYTE = 0x1401;
  static const GLuint UNSIGNED_INT = 0x1405;
  static const GLuint UNSIGNED_SHORT = 0x1403;
  static const GLuint VENDOR = 0x1F00;
  static const GLuint VERSION = 0x1F02;
  static const GLuint VIEWPORT = 0x0BA2;
  static const GLuint XOR = 0x1506;
  static const GLuint ZERO = 0;

  // GL_VERSION_1_1
  static const GLuint R3_G3_B2 = 0x2A10;
  static const GLuint RGB10 = 0x8052;
  static const GLuint RGB10_A2 = 0x8059;
  static const GLuint RGB12 = 0x8053;
  static const GLuint RGB16 = 0x8054;
  static const GLuint RGB4 = 0x804F;
  static const GLuint RGB5 = 0x8050;
  static const GLuint RGB5_A1 = 0x8057;
  static const GLuint RGB8 = 0x8051;
  static const GLuint RGBA12 = 0x805A;
  static const GLuint RGBA16 = 0x805B;
  static const GLuint RGBA2 = 0x8055;
  static const GLuint RGBA4 = 0x8056;
  static const GLuint RGBA8 = 0x8058;
  static const GLuint TEXTURE_BINDING_1D = 0x8068;
  static const GLuint TEXTURE_BINDING_2D = 0x8069;
  static const GLuint TEXTURE_INTERNAL_FORMAT = 0x1003;
  static const GLuint VERTEX_ARRAY = 0x8074;

  // GL_VERSION_1_2
  static const GLuint ALIASED_LINE_WIDTH_RANGE = 0x846E;
  static const GLuint BGR = 0x80E0;
  static const GLuint BGRA = 0x80E1;
  static const GLuint CLAMP_TO_EDGE = 0x812F;
  static const GLuint MAX_3D_TEXTURE_SIZE = 0x8073;
  static const GLuint MAX_ELEMENTS_INDICES = 0x80E9;
  static const GLuint MAX_ELEMENTS_VERTICES = 0x80E8;
  static const GLuint PACK_IMAGE_HEIGHT = 0x806C;
  static const GLuint PACK_SKIP_IMAGES = 0x806B;
  static const GLuint PROXY_TEXTURE_3D = 0x8070;
  static const GLuint SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
  static const GLuint SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
  static const GLuint SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
  static const GLuint SMOOTH_POINT_SIZE_RANGE = 0x0B12;
  static const GLuint TEXTURE_3D = 0x806F;
  static const GLuint TEXTURE_BASE_LEVEL = 0x813C;
  static const GLuint TEXTURE_BINDING_3D = 0x806A;
  static const GLuint TEXTURE_DEPTH = 0x8071;
  static const GLuint TEXTURE_MAX_LEVEL = 0x813D;
  static const GLuint TEXTURE_MAX_LOD = 0x813B;
  static const GLuint TEXTURE_MIN_LOD = 0x813A;
  static const GLuint TEXTURE_WRAP_R = 0x8072;
  static const GLuint UNPACK_IMAGE_HEIGHT = 0x806E;
  static const GLuint UNPACK_SKIP_IMAGES = 0x806D;
  static const GLuint UNSIGNED_BYTE_2_3_3_REV = 0x8362;
  static const GLuint UNSIGNED_BYTE_3_3_2 = 0x8032;
  static const GLuint UNSIGNED_INT_10_10_10_2 = 0x8036;
  static const GLuint UNSIGNED_INT_2_10_10_10_REV = 0x8368;
  static const GLuint UNSIGNED_INT_8_8_8_8 = 0x8035;
  static const GLuint UNSIGNED_INT_8_8_8_8_REV = 0x8367;
  static const GLuint UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
  static const GLuint UNSIGNED_SHORT_4_4_4_4 = 0x8033;
  static const GLuint UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
  static const GLuint UNSIGNED_SHORT_5_5_5_1 = 0x8034;
  static const GLuint UNSIGNED_SHORT_5_6_5 = 0x8363;
  static const GLuint UNSIGNED_SHORT_5_6_5_REV = 0x8364;

  // GL_VERSION_1_3
  static const GLuint ACTIVE_TEXTURE = 0x84E0;
  static const GLuint CLAMP_TO_BORDER = 0x812D;
  static const GLuint COMPRESSED_RGB = 0x84ED;
  static const GLuint COMPRESSED_RGBA = 0x84EE;
  static const GLuint COMPRESSED_TEXTURE_FORMATS = 0x86A3;
  static const GLuint MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
  static const GLuint MULTISAMPLE = 0x809D;
  static const GLuint NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
  static const GLuint PROXY_TEXTURE_CUBE_MAP = 0x851B;
  static const GLuint SAMPLES = 0x80A9;
  static const GLuint SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
  static const GLuint SAMPLE_ALPHA_TO_ONE = 0x809F;
  static const GLuint SAMPLE_BUFFERS = 0x80A8;
  static const GLuint SAMPLE_COVERAGE = 0x80A0;
  static const GLuint SAMPLE_COVERAGE_INVERT = 0x80AB;
  static const GLuint SAMPLE_COVERAGE_VALUE = 0x80AA;
  static const GLuint TEXTURE0 = 0x84C0;
  static const GLuint TEXTURE1 = 0x84C1;
  static const GLuint TEXTURE10 = 0x84CA;
  static const GLuint TEXTURE11 = 0x84CB;
  static const GLuint TEXTURE12 = 0x84CC;
  static const GLuint TEXTURE13 = 0x84CD;
  static const GLuint TEXTURE14 = 0x84CE;
  static const GLuint TEXTURE15 = 0x84CF;
  static const GLuint TEXTURE16 = 0x84D0;
  static const GLuint TEXTURE17 = 0x84D1;
  static const GLuint TEXTURE18 = 0x84D2;
  static const GLuint TEXTURE19 = 0x84D3;
  static const GLuint TEXTURE2 = 0x84C2;
  static const GLuint TEXTURE20 = 0x84D4;
  static const GLuint TEXTURE21 = 0x84D5;
  static const GLuint TEXTURE22 = 0x84D6;
  static const GLuint TEXTURE23 = 0x84D7;
  static const GLuint TEXTURE24 = 0x84D8;
  static const GLuint TEXTURE25 = 0x84D9;
  static const GLuint TEXTURE26 = 0x84DA;
  static const GLuint TEXTURE27 = 0x84DB;
  static const GLuint TEXTURE28 = 0x84DC;
  static const GLuint TEXTURE29 = 0x84DD;
  static const GLuint TEXTURE3 = 0x84C3;
  static const GLuint TEXTURE30 = 0x84DE;
  static const GLuint TEXTURE31 = 0x84DF;
  static const GLuint TEXTURE4 = 0x84C4;
  static const GLuint TEXTURE5 = 0x84C5;
  static const GLuint TEXTURE6 = 0x84C6;
  static const GLuint TEXTURE7 = 0x84C7;
  static const GLuint TEXTURE8 = 0x84C8;
  static const GLuint TEXTURE9 = 0x84C9;
  static const GLuint TEXTURE_BINDING_CUBE_MAP = 0x8514;
  static const GLuint TEXTURE_COMPRESSED = 0x86A1;
  static const GLuint TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
  static const GLuint TEXTURE_COMPRESSION_HINT = 0x84EF;
  static const GLuint TEXTURE_CUBE_MAP = 0x8513;
  static const GLuint TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
  static const GLuint TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
  static const GLuint TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
  static const GLuint TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
  static const GLuint TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
  static const GLuint TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;

  // GL_VERSION_1_4
  static const GLuint BLEND_DST_ALPHA = 0x80CA;
  static const GLuint BLEND_DST_RGB = 0x80C8;
  static const GLuint BLEND_SRC_ALPHA = 0x80CB;
  static const GLuint BLEND_SRC_RGB = 0x80C9;
  static const GLuint CONSTANT_ALPHA = 0x8003;
  static const GLuint CONSTANT_COLOR = 0x8001;
  static const GLuint DECR_WRAP = 0x8508;
  static const GLuint DEPTH_COMPONENT16 = 0x81A5;
  static const GLuint DEPTH_COMPONENT24 = 0x81A6;
  static const GLuint DEPTH_COMPONENT32 = 0x81A7;
  static const GLuint FUNC_ADD = 0x8006;
  static const GLuint FUNC_REVERSE_SUBTRACT = 0x800B;
  static const GLuint FUNC_SUBTRACT = 0x800A;
  static const GLuint INCR_WRAP = 0x8507;
  static const GLuint MAX = 0x8008;
  static const GLuint MAX_TEXTURE_LOD_BIAS = 0x84FD;
  static const GLuint MIN = 0x8007;
  static const GLuint MIRRORED_REPEAT = 0x8370;
  static const GLuint ONE_MINUS_CONSTANT_ALPHA = 0x8004;
  static const GLuint ONE_MINUS_CONSTANT_COLOR = 0x8002;
  static const GLuint POINT_FADE_THRESHOLD_SIZE = 0x8128;
  static const GLuint TEXTURE_COMPARE_FUNC = 0x884D;
  static const GLuint TEXTURE_COMPARE_MODE = 0x884C;
  static const GLuint TEXTURE_DEPTH_SIZE = 0x884A;
  static const GLuint TEXTURE_LOD_BIAS = 0x8501;

  // GL_VERSION_1_5
  static const GLuint ARRAY_BUFFER = 0x8892;
  static const GLuint ARRAY_BUFFER_BINDING = 0x8894;
  static const GLuint BUFFER_ACCESS = 0x88BB;
  static const GLuint BUFFER_MAPPED = 0x88BC;
  static const GLuint BUFFER_MAP_POINTER = 0x88BD;
  static const GLuint BUFFER_SIZE = 0x8764;
  static const GLuint BUFFER_USAGE = 0x8765;
  static const GLuint CURRENT_QUERY = 0x8865;
  static const GLuint DYNAMIC_COPY = 0x88EA;
  static const GLuint DYNAMIC_DRAW = 0x88E8;
  static const GLuint DYNAMIC_READ = 0x88E9;
  static const GLuint ELEMENT_ARRAY_BUFFER = 0x8893;
  static const GLuint ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
  static const GLuint QUERY_COUNTER_BITS = 0x8864;
  static const GLuint QUERY_RESULT = 0x8866;
  static const GLuint QUERY_RESULT_AVAILABLE = 0x8867;
  static const GLuint READ_ONLY = 0x88B8;
  static const GLuint READ_WRITE = 0x88BA;
  static const GLuint SAMPLES_PASSED = 0x8914;
  static const GLuint SRC1_ALPHA = 0x8589;
  static const GLuint STATIC_COPY = 0x88E6;
  static const GLuint STATIC_DRAW = 0x88E4;
  static const GLuint STATIC_READ = 0x88E5;
  static const GLuint STREAM_COPY = 0x88E2;
  static const GLuint STREAM_DRAW = 0x88E0;
  static const GLuint STREAM_READ = 0x88E1;
  static const GLuint VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
  static const GLuint WRITE_ONLY = 0x88B9;

  // GL_VERSION_2_0
  static const GLuint ACTIVE_ATTRIBUTES = 0x8B89;
  static const GLuint ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
  static const GLuint ACTIVE_UNIFORMS = 0x8B86;
  static const GLuint ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
  static const GLuint ATTACHED_SHADERS = 0x8B85;
  static const GLuint BLEND_EQUATION_ALPHA = 0x883D;
  static const GLuint BLEND_EQUATION_RGB = 0x8009;
  static const GLuint BOOL = 0x8B56;
  static const GLuint BOOL_VEC2 = 0x8B57;
  static const GLuint BOOL_VEC3 = 0x8B58;
  static const GLuint BOOL_VEC4 = 0x8B59;
  static const GLuint COMPILE_STATUS = 0x8B81;
  static const GLuint CURRENT_PROGRAM = 0x8B8D;
  static const GLuint CURRENT_VERTEX_ATTRIB = 0x8626;
  static const GLuint DELETE_STATUS = 0x8B80;
  static const GLuint DRAW_BUFFER0 = 0x8825;
  static const GLuint DRAW_BUFFER1 = 0x8826;
  static const GLuint DRAW_BUFFER10 = 0x882F;
  static const GLuint DRAW_BUFFER11 = 0x8830;
  static const GLuint DRAW_BUFFER12 = 0x8831;
  static const GLuint DRAW_BUFFER13 = 0x8832;
  static const GLuint DRAW_BUFFER14 = 0x8833;
  static const GLuint DRAW_BUFFER15 = 0x8834;
  static const GLuint DRAW_BUFFER2 = 0x8827;
  static const GLuint DRAW_BUFFER3 = 0x8828;
  static const GLuint DRAW_BUFFER4 = 0x8829;
  static const GLuint DRAW_BUFFER5 = 0x882A;
  static const GLuint DRAW_BUFFER6 = 0x882B;
  static const GLuint DRAW_BUFFER7 = 0x882C;
  static const GLuint DRAW_BUFFER8 = 0x882D;
  static const GLuint DRAW_BUFFER9 = 0x882E;
  static const GLuint FLOAT_MAT2 = 0x8B5A;
  static const GLuint FLOAT_MAT3 = 0x8B5B;
  static const GLuint FLOAT_MAT4 = 0x8B5C;
  static const GLuint FLOAT_VEC2 = 0x8B50;
  static const GLuint FLOAT_VEC3 = 0x8B51;
  static const GLuint FLOAT_VEC4 = 0x8B52;
  static const GLuint FRAGMENT_SHADER = 0x8B30;
  static const GLuint FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
  static const GLuint INFO_LOG_LENGTH = 0x8B84;
  static const GLuint INT_VEC2 = 0x8B53;
  static const GLuint INT_VEC3 = 0x8B54;
  static const GLuint INT_VEC4 = 0x8B55;
  static const GLuint LINK_STATUS = 0x8B82;
  static const GLuint LOWER_LEFT = 0x8CA1;
  static const GLuint MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
  static const GLuint MAX_DRAW_BUFFERS = 0x8824;
  static const GLuint MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
  static const GLuint MAX_TEXTURE_IMAGE_UNITS = 0x8872;
  static const GLuint MAX_VARYING_FLOATS = 0x8B4B;
  static const GLuint MAX_VERTEX_ATTRIBS = 0x8869;
  static const GLuint MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
  static const GLuint MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
  static const GLuint POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
  static const GLuint SAMPLER_1D = 0x8B5D;
  static const GLuint SAMPLER_1D_SHADOW = 0x8B61;
  static const GLuint SAMPLER_2D = 0x8B5E;
  static const GLuint SAMPLER_2D_SHADOW = 0x8B62;
  static const GLuint SAMPLER_3D = 0x8B5F;
  static const GLuint SAMPLER_CUBE = 0x8B60;
  static const GLuint SHADER_SOURCE_LENGTH = 0x8B88;
  static const GLuint SHADER_TYPE = 0x8B4F;
  static const GLuint SHADING_LANGUAGE_VERSION = 0x8B8C;
  static const GLuint STENCIL_BACK_FAIL = 0x8801;
  static const GLuint STENCIL_BACK_FUNC = 0x8800;
  static const GLuint STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
  static const GLuint STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
  static const GLuint STENCIL_BACK_REF = 0x8CA3;
  static const GLuint STENCIL_BACK_VALUE_MASK = 0x8CA4;
  static const GLuint STENCIL_BACK_WRITEMASK = 0x8CA5;
  static const GLuint UPPER_LEFT = 0x8CA2;
  static const GLuint VALIDATE_STATUS = 0x8B83;
  static const GLuint VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
  static const GLuint VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
  static const GLuint VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
  static const GLuint VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
  static const GLuint VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
  static const GLuint VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
  static const GLuint VERTEX_PROGRAM_POINT_SIZE = 0x8642;
  static const GLuint VERTEX_SHADER = 0x8B31;

  // GL_VERSION_2_1
  static const GLuint COMPRESSED_SRGB = 0x8C48;
  static const GLuint COMPRESSED_SRGB_ALPHA = 0x8C49;
  static const GLuint FLOAT_MAT2x3 = 0x8B65;
  static const GLuint FLOAT_MAT2x4 = 0x8B66;
  static const GLuint FLOAT_MAT3x2 = 0x8B67;
  static const GLuint FLOAT_MAT3x4 = 0x8B68;
  static const GLuint FLOAT_MAT4x2 = 0x8B69;
  static const GLuint FLOAT_MAT4x3 = 0x8B6A;
  static const GLuint PIXEL_PACK_BUFFER = 0x88EB;
  static const GLuint PIXEL_PACK_BUFFER_BINDING = 0x88ED;
  static const GLuint PIXEL_UNPACK_BUFFER = 0x88EC;
  static const GLuint PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
  static const GLuint SRGB = 0x8C40;
  static const GLuint SRGB8 = 0x8C41;
  static const GLuint SRGB8_ALPHA8 = 0x8C43;
  static const GLuint SRGB_ALPHA = 0x8C42;

  // GL_VERSION_3_0
  static const GLuint BGRA_INTEGER = 0x8D9B;
  static const GLuint BGR_INTEGER = 0x8D9A;
  static const GLuint BLUE_INTEGER = 0x8D96;
  static const GLuint BUFFER_ACCESS_FLAGS = 0x911F;
  static const GLuint BUFFER_MAP_LENGTH = 0x9120;
  static const GLuint BUFFER_MAP_OFFSET = 0x9121;
  static const GLuint CLAMP_READ_COLOR = 0x891C;
  static const GLuint CLIP_DISTANCE0 = 0x3000;
  static const GLuint CLIP_DISTANCE1 = 0x3001;
  static const GLuint CLIP_DISTANCE2 = 0x3002;
  static const GLuint CLIP_DISTANCE3 = 0x3003;
  static const GLuint CLIP_DISTANCE4 = 0x3004;
  static const GLuint CLIP_DISTANCE5 = 0x3005;
  static const GLuint CLIP_DISTANCE6 = 0x3006;
  static const GLuint CLIP_DISTANCE7 = 0x3007;
  static const GLuint COLOR_ATTACHMENT0 = 0x8CE0;
  static const GLuint COLOR_ATTACHMENT1 = 0x8CE1;
  static const GLuint COLOR_ATTACHMENT10 = 0x8CEA;
  static const GLuint COLOR_ATTACHMENT11 = 0x8CEB;
  static const GLuint COLOR_ATTACHMENT12 = 0x8CEC;
  static const GLuint COLOR_ATTACHMENT13 = 0x8CED;
  static const GLuint COLOR_ATTACHMENT14 = 0x8CEE;
  static const GLuint COLOR_ATTACHMENT15 = 0x8CEF;
  static const GLuint COLOR_ATTACHMENT16 = 0x8CF0;
  static const GLuint COLOR_ATTACHMENT17 = 0x8CF1;
  static const GLuint COLOR_ATTACHMENT18 = 0x8CF2;
  static const GLuint COLOR_ATTACHMENT19 = 0x8CF3;
  static const GLuint COLOR_ATTACHMENT2 = 0x8CE2;
  static const GLuint COLOR_ATTACHMENT20 = 0x8CF4;
  static const GLuint COLOR_ATTACHMENT21 = 0x8CF5;
  static const GLuint COLOR_ATTACHMENT22 = 0x8CF6;
  static const GLuint COLOR_ATTACHMENT23 = 0x8CF7;
  static const GLuint COLOR_ATTACHMENT24 = 0x8CF8;
  static const GLuint COLOR_ATTACHMENT25 = 0x8CF9;
  static const GLuint COLOR_ATTACHMENT26 = 0x8CFA;
  static const GLuint COLOR_ATTACHMENT27 = 0x8CFB;
  static const GLuint COLOR_ATTACHMENT28 = 0x8CFC;
  static const GLuint COLOR_ATTACHMENT29 = 0x8CFD;
  static const GLuint COLOR_ATTACHMENT3 = 0x8CE3;
  static const GLuint COLOR_ATTACHMENT30 = 0x8CFE;
  static const GLuint COLOR_ATTACHMENT31 = 0x8CFF;
  static const GLuint COLOR_ATTACHMENT4 = 0x8CE4;
  static const GLuint COLOR_ATTACHMENT5 = 0x8CE5;
  static const GLuint COLOR_ATTACHMENT6 = 0x8CE6;
  static const GLuint COLOR_ATTACHMENT7 = 0x8CE7;
  static const GLuint COLOR_ATTACHMENT8 = 0x8CE8;
  static const GLuint COLOR_ATTACHMENT9 = 0x8CE9;
  static const GLuint COMPARE_REF_TO_TEXTURE = 0x884E;
  static const GLuint COMPRESSED_RED = 0x8225;
  static const GLuint COMPRESSED_RED_RGTC1 = 0x8DBB;
  static const GLuint COMPRESSED_RG = 0x8226;
  static const GLuint COMPRESSED_RG_RGTC2 = 0x8DBD;
  static const GLuint COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
  static const GLuint COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
  static const GLuint CONTEXT_FLAGS = 0x821E;
  static const GLuint CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
  static const GLuint DEPTH24_STENCIL8 = 0x88F0;
  static const GLuint DEPTH32F_STENCIL8 = 0x8CAD;
  static const GLuint DEPTH_ATTACHMENT = 0x8D00;
  static const GLuint DEPTH_COMPONENT32F = 0x8CAC;
  static const GLuint DEPTH_STENCIL = 0x84F9;
  static const GLuint DEPTH_STENCIL_ATTACHMENT = 0x821A;
  static const GLuint DRAW_FRAMEBUFFER = 0x8CA9;
  static const GLuint DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
  static const GLuint FIXED_ONLY = 0x891D;
  static const GLuint FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
  static const GLuint FRAMEBUFFER = 0x8D40;
  static const GLuint FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
  static const GLuint FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
  static const GLuint FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
  static const GLuint FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
  static const GLuint FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
  static const GLuint FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
  static const GLuint FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
  static const GLuint FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
  static const GLuint FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
  static const GLuint FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
  static const GLuint FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
  static const GLuint FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
  static const GLuint FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
  static const GLuint FRAMEBUFFER_BINDING = 0x8CA6;
  static const GLuint FRAMEBUFFER_COMPLETE = 0x8CD5;
  static const GLuint FRAMEBUFFER_DEFAULT = 0x8218;
  static const GLuint FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
  static const GLuint FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
  static const GLuint FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
  static const GLuint FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
  static const GLuint FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
  static const GLuint FRAMEBUFFER_SRGB = 0x8DB9;
  static const GLuint FRAMEBUFFER_UNDEFINED = 0x8219;
  static const GLuint FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
  static const GLuint GREEN_INTEGER = 0x8D95;
  static const GLuint HALF_FLOAT = 0x140B;
  static const GLuint INTERLEAVED_ATTRIBS = 0x8C8C;
  static const GLuint INT_SAMPLER_1D = 0x8DC9;
  static const GLuint INT_SAMPLER_1D_ARRAY = 0x8DCE;
  static const GLuint INT_SAMPLER_2D = 0x8DCA;
  static const GLuint INT_SAMPLER_2D_ARRAY = 0x8DCF;
  static const GLuint INT_SAMPLER_3D = 0x8DCB;
  static const GLuint INT_SAMPLER_CUBE = 0x8DCC;
  static const GLuint INVALID_FRAMEBUFFER_OPERATION = 0x0506;
  static const GLuint MAJOR_VERSION = 0x821B;
  static const GLuint MAP_FLUSH_EXPLICIT_BIT = 0x0010;
  static const GLuint MAP_INVALIDATE_BUFFER_BIT = 0x0008;
  static const GLuint MAP_INVALIDATE_RANGE_BIT = 0x0004;
  static const GLuint MAP_READ_BIT = 0x0001;
  static const GLuint MAP_UNSYNCHRONIZED_BIT = 0x0020;
  static const GLuint MAP_WRITE_BIT = 0x0002;
  static const GLuint MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
  static const GLuint MAX_CLIP_DISTANCES = 0x0D32;
  static const GLuint MAX_COLOR_ATTACHMENTS = 0x8CDF;
  static const GLuint MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
  static const GLuint MAX_RENDERBUFFER_SIZE = 0x84E8;
  static const GLuint MAX_SAMPLES = 0x8D57;
  static const GLuint MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
  static const GLuint MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
  static const GLuint MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
  static const GLuint MAX_VARYING_COMPONENTS = 0x8B4B;
  static const GLuint MINOR_VERSION = 0x821C;
  static const GLuint MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
  static const GLuint NUM_EXTENSIONS = 0x821D;
  static const GLuint PRIMITIVES_GENERATED = 0x8C87;
  static const GLuint PROXY_TEXTURE_1D_ARRAY = 0x8C19;
  static const GLuint PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
  static const GLuint QUERY_BY_REGION_NO_WAIT = 0x8E16;
  static const GLuint QUERY_BY_REGION_WAIT = 0x8E15;
  static const GLuint QUERY_NO_WAIT = 0x8E14;
  static const GLuint QUERY_WAIT = 0x8E13;
  static const GLuint R11F_G11F_B10F = 0x8C3A;
  static const GLuint R16 = 0x822A;
  static const GLuint R16F = 0x822D;
  static const GLuint R16I = 0x8233;
  static const GLuint R16UI = 0x8234;
  static const GLuint R32F = 0x822E;
  static const GLuint R32I = 0x8235;
  static const GLuint R32UI = 0x8236;
  static const GLuint R8 = 0x8229;
  static const GLuint R8I = 0x8231;
  static const GLuint R8UI = 0x8232;
  static const GLuint RASTERIZER_DISCARD = 0x8C89;
  static const GLuint READ_FRAMEBUFFER = 0x8CA8;
  static const GLuint READ_FRAMEBUFFER_BINDING = 0x8CAA;
  static const GLuint RED_INTEGER = 0x8D94;
  static const GLuint RENDERBUFFER = 0x8D41;
  static const GLuint RENDERBUFFER_ALPHA_SIZE = 0x8D53;
  static const GLuint RENDERBUFFER_BINDING = 0x8CA7;
  static const GLuint RENDERBUFFER_BLUE_SIZE = 0x8D52;
  static const GLuint RENDERBUFFER_DEPTH_SIZE = 0x8D54;
  static const GLuint RENDERBUFFER_GREEN_SIZE = 0x8D51;
  static const GLuint RENDERBUFFER_HEIGHT = 0x8D43;
  static const GLuint RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
  static const GLuint RENDERBUFFER_RED_SIZE = 0x8D50;
  static const GLuint RENDERBUFFER_SAMPLES = 0x8CAB;
  static const GLuint RENDERBUFFER_STENCIL_SIZE = 0x8D55;
  static const GLuint RENDERBUFFER_WIDTH = 0x8D42;
  static const GLuint RG = 0x8227;
  static const GLuint RG16 = 0x822C;
  static const GLuint RG16F = 0x822F;
  static const GLuint RG16I = 0x8239;
  static const GLuint RG16UI = 0x823A;
  static const GLuint RG32F = 0x8230;
  static const GLuint RG32I = 0x823B;
  static const GLuint RG32UI = 0x823C;
  static const GLuint RG8 = 0x822B;
  static const GLuint RG8I = 0x8237;
  static const GLuint RG8UI = 0x8238;
  static const GLuint RGB16F = 0x881B;
  static const GLuint RGB16I = 0x8D89;
  static const GLuint RGB16UI = 0x8D77;
  static const GLuint RGB32F = 0x8815;
  static const GLuint RGB32I = 0x8D83;
  static const GLuint RGB32UI = 0x8D71;
  static const GLuint RGB8I = 0x8D8F;
  static const GLuint RGB8UI = 0x8D7D;
  static const GLuint RGB9_E5 = 0x8C3D;
  static const GLuint RGBA16F = 0x881A;
  static const GLuint RGBA16I = 0x8D88;
  static const GLuint RGBA16UI = 0x8D76;
  static const GLuint RGBA32F = 0x8814;
  static const GLuint RGBA32I = 0x8D82;
  static const GLuint RGBA32UI = 0x8D70;
  static const GLuint RGBA8I = 0x8D8E;
  static const GLuint RGBA8UI = 0x8D7C;
  static const GLuint RGBA_INTEGER = 0x8D99;
  static const GLuint RGB_INTEGER = 0x8D98;
  static const GLuint RG_INTEGER = 0x8228;
  static const GLuint SAMPLER_1D_ARRAY = 0x8DC0;
  static const GLuint SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
  static const GLuint SAMPLER_2D_ARRAY = 0x8DC1;
  static const GLuint SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
  static const GLuint SAMPLER_CUBE_SHADOW = 0x8DC5;
  static const GLuint SEPARATE_ATTRIBS = 0x8C8D;
  static const GLuint STENCIL_ATTACHMENT = 0x8D20;
  static const GLuint STENCIL_INDEX1 = 0x8D46;
  static const GLuint STENCIL_INDEX16 = 0x8D49;
  static const GLuint STENCIL_INDEX4 = 0x8D47;
  static const GLuint STENCIL_INDEX8 = 0x8D48;
  static const GLuint TEXTURE_1D_ARRAY = 0x8C18;
  static const GLuint TEXTURE_2D_ARRAY = 0x8C1A;
  static const GLuint TEXTURE_ALPHA_TYPE = 0x8C13;
  static const GLuint TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
  static const GLuint TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
  static const GLuint TEXTURE_BLUE_TYPE = 0x8C12;
  static const GLuint TEXTURE_DEPTH_TYPE = 0x8C16;
  static const GLuint TEXTURE_GREEN_TYPE = 0x8C11;
  static const GLuint TEXTURE_RED_TYPE = 0x8C10;
  static const GLuint TEXTURE_SHARED_SIZE = 0x8C3F;
  static const GLuint TEXTURE_STENCIL_SIZE = 0x88F1;
  static const GLuint TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
  static const GLuint TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
  static const GLuint TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
  static const GLuint TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
  static const GLuint TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
  static const GLuint TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
  static const GLuint TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
  static const GLuint TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
  static const GLuint UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
  static const GLuint UNSIGNED_INT_24_8 = 0x84FA;
  static const GLuint UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
  static const GLuint UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
  static const GLuint UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
  static const GLuint UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
  static const GLuint UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
  static const GLuint UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
  static const GLuint UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
  static const GLuint UNSIGNED_INT_VEC2 = 0x8DC6;
  static const GLuint UNSIGNED_INT_VEC3 = 0x8DC7;
  static const GLuint UNSIGNED_INT_VEC4 = 0x8DC8;
  static const GLuint UNSIGNED_NORMALIZED = 0x8C17;
  static const GLuint VERTEX_ARRAY_BINDING = 0x85B5;
  static const GLuint VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;

  // GL_VERSION_3_1
  static const GLuint ACTIVE_UNIFORM_BLOCKS = 0x8A36;
  static const GLuint ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
  static const GLuint COPY_READ_BUFFER = 0x8F36;
  static const GLuint COPY_WRITE_BUFFER = 0x8F37;
  static const GLuint INT_SAMPLER_2D_RECT = 0x8DCD;
  static const GLuint INT_SAMPLER_BUFFER = 0x8DD0;
  static const GLuint INVALID_INDEX = 0xFFFFFFFFu;
  static const GLuint MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
  static const GLuint MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
  static const GLuint MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
  static const GLuint MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
  static const GLuint MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
  static const GLuint MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
  static const GLuint MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
  static const GLuint MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
  static const GLuint MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
  static const GLuint MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
  static const GLuint MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
  static const GLuint PRIMITIVE_RESTART = 0x8F9D;
  static const GLuint PRIMITIVE_RESTART_INDEX = 0x8F9E;
  static const GLuint PROXY_TEXTURE_RECTANGLE = 0x84F7;
  static const GLuint R16_SNORM = 0x8F98;
  static const GLuint R8_SNORM = 0x8F94;
  static const GLuint RG16_SNORM = 0x8F99;
  static const GLuint RG8_SNORM = 0x8F95;
  static const GLuint RGB16_SNORM = 0x8F9A;
  static const GLuint RGB8_SNORM = 0x8F96;
  static const GLuint RGBA16_SNORM = 0x8F9B;
  static const GLuint RGBA8_SNORM = 0x8F97;
  static const GLuint SAMPLER_2D_RECT = 0x8B63;
  static const GLuint SAMPLER_2D_RECT_SHADOW = 0x8B64;
  static const GLuint SAMPLER_BUFFER = 0x8DC2;
  static const GLuint SIGNED_NORMALIZED = 0x8F9C;
  static const GLuint TEXTURE_BINDING_BUFFER = 0x8C2C;
  static const GLuint TEXTURE_BINDING_RECTANGLE = 0x84F6;
  static const GLuint TEXTURE_BUFFER = 0x8C2A;
  static const GLuint TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
  static const GLuint TEXTURE_RECTANGLE = 0x84F5;
  static const GLuint UNIFORM_ARRAY_STRIDE = 0x8A3C;
  static const GLuint UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
  static const GLuint UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
  static const GLuint UNIFORM_BLOCK_BINDING = 0x8A3F;
  static const GLuint UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
  static const GLuint UNIFORM_BLOCK_INDEX = 0x8A3A;
  static const GLuint UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
  static const GLuint UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
  static const GLuint UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
  static const GLuint UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
  static const GLuint UNIFORM_BUFFER = 0x8A11;
  static const GLuint UNIFORM_BUFFER_BINDING = 0x8A28;
  static const GLuint UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
  static const GLuint UNIFORM_BUFFER_SIZE = 0x8A2A;
  static const GLuint UNIFORM_BUFFER_START = 0x8A29;
  static const GLuint UNIFORM_IS_ROW_MAJOR = 0x8A3E;
  static const GLuint UNIFORM_MATRIX_STRIDE = 0x8A3D;
  static const GLuint UNIFORM_NAME_LENGTH = 0x8A39;
  static const GLuint UNIFORM_OFFSET = 0x8A3B;
  static const GLuint UNIFORM_SIZE = 0x8A38;
  static const GLuint UNIFORM_TYPE = 0x8A37;
  static const GLuint UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
  static const GLuint UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;

  // GL_VERSION_3_2
  static const GLuint ALREADY_SIGNALED = 0x911A;
  static const GLuint CONDITION_SATISFIED = 0x911C;
  static const GLuint CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
  static const GLuint CONTEXT_CORE_PROFILE_BIT = 0x00000001;
  static const GLuint CONTEXT_PROFILE_MASK = 0x9126;
  static const GLuint DEPTH_CLAMP = 0x864F;
  static const GLuint FIRST_VERTEX_CONVENTION = 0x8E4D;
  static const GLuint FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
  static const GLuint FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
  static const GLuint GEOMETRY_INPUT_TYPE = 0x8917;
  static const GLuint GEOMETRY_OUTPUT_TYPE = 0x8918;
  static const GLuint GEOMETRY_SHADER = 0x8DD9;
  static const GLuint GEOMETRY_VERTICES_OUT = 0x8916;
  static const GLuint INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
  static const GLuint INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
  static const GLuint LAST_VERTEX_CONVENTION = 0x8E4E;
  static const GLuint LINES_ADJACENCY = 0x000A;
  static const GLuint LINE_STRIP_ADJACENCY = 0x000B;
  static const GLuint MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
  static const GLuint MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
  static const GLuint MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
  static const GLuint MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
  static const GLuint MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
  static const GLuint MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
  static const GLuint MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
  static const GLuint MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
  static const GLuint MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
  static const GLuint MAX_INTEGER_SAMPLES = 0x9110;
  static const GLuint MAX_SAMPLE_MASK_WORDS = 0x8E59;
  static const GLuint MAX_SERVER_WAIT_TIMEOUT = 0x9111;
  static const GLuint MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
  static const GLuint OBJECT_TYPE = 0x9112;
  static const GLuint PROGRAM_POINT_SIZE = 0x8642;
  static const GLuint PROVOKING_VERTEX = 0x8E4F;
  static const GLuint PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
  static const GLuint PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
  static const GLuint QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
  static const GLuint SAMPLER_2D_MULTISAMPLE = 0x9108;
  static const GLuint SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
  static const GLuint SAMPLE_MASK = 0x8E51;
  static const GLuint SAMPLE_MASK_VALUE = 0x8E52;
  static const GLuint SAMPLE_POSITION = 0x8E50;
  static const GLuint SIGNALED = 0x9119;
  static const GLuint SYNC_CONDITION = 0x9113;
  static const GLuint SYNC_FENCE = 0x9116;
  static const GLuint SYNC_FLAGS = 0x9115;
  static const GLuint SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
  static const GLuint SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
  static const GLuint SYNC_STATUS = 0x9114;
  static const GLuint TEXTURE_2D_MULTISAMPLE = 0x9100;
  static const GLuint TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
  static const GLuint TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
  static const GLuint TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
  static const GLuint TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
  static const GLuint TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
  static const GLuint TEXTURE_SAMPLES = 0x9106;
  static const GLuint TIMEOUT_EXPIRED = 0x911B;
  static const GLuint64 TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFull;
  static const GLuint TRIANGLES_ADJACENCY = 0x000C;
  static const GLuint TRIANGLE_STRIP_ADJACENCY = 0x000D;
  static const GLuint UNSIGNALED = 0x9118;
  static const GLuint UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
  static const GLuint UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
  static const GLuint WAIT_FAILED = 0x911D;

  // GL_VERSION_3_3
  static const GLuint ANY_SAMPLES_PASSED = 0x8C2F;
  static const GLuint INT_2_10_10_10_REV = 0x8D9F;
  static const GLuint MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
  static const GLuint ONE_MINUS_SRC1_ALPHA = 0x88FB;
  static const GLuint ONE_MINUS_SRC1_COLOR = 0x88FA;
  static const GLuint RGB10_A2UI = 0x906F;
  static const GLuint SAMPLER_BINDING = 0x8919;
  static const GLuint SRC1_COLOR = 0x88F9;
  static const GLuint TEXTURE_SWIZZLE_A = 0x8E45;
  static const GLuint TEXTURE_SWIZZLE_B = 0x8E44;
  static const GLuint TEXTURE_SWIZZLE_G = 0x8E43;
  static const GLuint TEXTURE_SWIZZLE_R = 0x8E42;
  static const GLuint TEXTURE_SWIZZLE_RGBA = 0x8E46;
  static const GLuint TIMESTAMP = 0x8E28;
  static const GLuint TIME_ELAPSED = 0x88BF;
  static const GLuint VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;

  // GL_VERSION_4_0
  static const GLuint ACTIVE_SUBROUTINES = 0x8DE5;
  static const GLuint ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
  static const GLuint ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
  static const GLuint ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
  static const GLuint ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
  static const GLuint COMPATIBLE_SUBROUTINES = 0x8E4B;
  static const GLuint DOUBLE_MAT2 = 0x8F46;
  static const GLuint DOUBLE_MAT2x3 = 0x8F49;
  static const GLuint DOUBLE_MAT2x4 = 0x8F4A;
  static const GLuint DOUBLE_MAT3 = 0x8F47;
  static const GLuint DOUBLE_MAT3x2 = 0x8F4B;
  static const GLuint DOUBLE_MAT3x4 = 0x8F4C;
  static const GLuint DOUBLE_MAT4 = 0x8F48;
  static const GLuint DOUBLE_MAT4x2 = 0x8F4D;
  static const GLuint DOUBLE_MAT4x3 = 0x8F4E;
  static const GLuint DOUBLE_VEC2 = 0x8FFC;
  static const GLuint DOUBLE_VEC3 = 0x8FFD;
  static const GLuint DOUBLE_VEC4 = 0x8FFE;
  static const GLuint DRAW_INDIRECT_BUFFER = 0x8F3F;
  static const GLuint DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
  static const GLuint FRACTIONAL_EVEN = 0x8E7C;
  static const GLuint FRACTIONAL_ODD = 0x8E7B;
  static const GLuint FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
  static const GLuint GEOMETRY_SHADER_INVOCATIONS = 0x887F;
  static const GLuint INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
  static const GLuint ISOLINES = 0x8E7A;
  static const GLuint MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
  static const GLuint MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
  static const GLuint MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
  static const GLuint MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
  static const GLuint MAX_PATCH_VERTICES = 0x8E7D;
  static const GLuint MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
  static const GLuint MAX_SUBROUTINES = 0x8DE7;
  static const GLuint MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
  static const GLuint MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
  static const GLuint MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
  static const GLuint MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
  static const GLuint MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
  static const GLuint MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
  static const GLuint MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
  static const GLuint MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
  static const GLuint MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
  static const GLuint MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
  static const GLuint MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
  static const GLuint MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
  static const GLuint MAX_TESS_GEN_LEVEL = 0x8E7E;
  static const GLuint MAX_TESS_PATCH_COMPONENTS = 0x8E84;
  static const GLuint MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
  static const GLuint MAX_VERTEX_STREAMS = 0x8E71;
  static const GLuint MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
  static const GLuint MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
  static const GLuint MIN_SAMPLE_SHADING_VALUE = 0x8C37;
  static const GLuint NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
  static const GLuint PATCHES = 0x000E;
  static const GLuint PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
  static const GLuint PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
  static const GLuint PATCH_VERTICES = 0x8E72;
  static const GLuint PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
  static const GLuint SAMPLER_CUBE_MAP_ARRAY = 0x900C;
  static const GLuint SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
  static const GLuint SAMPLE_SHADING = 0x8C36;
  static const GLuint TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
  static const GLuint TESS_CONTROL_SHADER = 0x8E88;
  static const GLuint TESS_EVALUATION_SHADER = 0x8E87;
  static const GLuint TESS_GEN_MODE = 0x8E76;
  static const GLuint TESS_GEN_POINT_MODE = 0x8E79;
  static const GLuint TESS_GEN_SPACING = 0x8E77;
  static const GLuint TESS_GEN_VERTEX_ORDER = 0x8E78;
  static const GLuint TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
  static const GLuint TEXTURE_CUBE_MAP_ARRAY = 0x9009;
  static const GLuint TRANSFORM_FEEDBACK = 0x8E22;
  static const GLuint TRANSFORM_FEEDBACK_BINDING = 0x8E25;
  static const GLuint TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
  static const GLuint TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
  static const GLuint UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
  static const GLuint UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
  static const GLuint UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;

  // GL_VERSION_4_1
  static const GLuint ACTIVE_PROGRAM = 0x8259;
  static const GLuint ALL_SHADER_BITS = 0xFFFFFFFF;
  static const GLuint FIXED = 0x140C;
  static const GLuint FRAGMENT_SHADER_BIT = 0x00000002;
  static const GLuint GEOMETRY_SHADER_BIT = 0x00000004;
  static const GLuint HIGH_FLOAT = 0x8DF2;
  static const GLuint HIGH_INT = 0x8DF5;
  static const GLuint IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
  static const GLuint IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
  static const GLuint LAYER_PROVOKING_VERTEX = 0x825E;
  static const GLuint LOW_FLOAT = 0x8DF0;
  static const GLuint LOW_INT = 0x8DF3;
  static const GLuint MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
  static const GLuint MAX_VARYING_VECTORS = 0x8DFC;
  static const GLuint MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
  static const GLuint MAX_VIEWPORTS = 0x825B;
  static const GLuint MEDIUM_FLOAT = 0x8DF1;
  static const GLuint MEDIUM_INT = 0x8DF4;
  static const GLuint NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
  static const GLuint NUM_SHADER_BINARY_FORMATS = 0x8DF9;
  static const GLuint PROGRAM_BINARY_FORMATS = 0x87FF;
  static const GLuint PROGRAM_BINARY_LENGTH = 0x8741;
  static const GLuint PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
  static const GLuint PROGRAM_PIPELINE_BINDING = 0x825A;
  static const GLuint PROGRAM_SEPARABLE = 0x8258;
  static const GLuint RGB565 = 0x8D62;
  static const GLuint SHADER_BINARY_FORMATS = 0x8DF8;
  static const GLuint SHADER_COMPILER = 0x8DFA;
  static const GLuint TESS_CONTROL_SHADER_BIT = 0x00000008;
  static const GLuint TESS_EVALUATION_SHADER_BIT = 0x00000010;
  static const GLuint UNDEFINED_VERTEX = 0x8260;
  static const GLuint VERTEX_SHADER_BIT = 0x00000001;
  static const GLuint VIEWPORT_BOUNDS_RANGE = 0x825D;
  static const GLuint VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
  static const GLuint VIEWPORT_SUBPIXEL_BITS = 0x825C;

  // GL_VERSION_4_2
  static const GLuint ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
  static const GLuint ALL_BARRIER_BITS = 0xFFFFFFFF;
  static const GLuint ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
  static const GLuint ATOMIC_COUNTER_BUFFER = 0x92C0;
  static const GLuint ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
  static const GLuint ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
  static const GLuint ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
  static const GLuint ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
  static const GLuint ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
  static const GLuint ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
  static const GLuint ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
  static const GLuint ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
  static const GLuint ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
  static const GLuint ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
  static const GLuint ATOMIC_COUNTER_BUFFER_START = 0x92C2;
  static const GLuint BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
  static const GLuint COMMAND_BARRIER_BIT = 0x00000040;
  static const GLuint COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
  static const GLuint COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
  static const GLuint COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
  static const GLuint COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
  static const GLuint COPY_READ_BUFFER_BINDING = 0x8F36;
  static const GLuint COPY_WRITE_BUFFER_BINDING = 0x8F37;
  static const GLuint ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
  static const GLuint FRAMEBUFFER_BARRIER_BIT = 0x00000400;
  static const GLuint IMAGE_1D = 0x904C;
  static const GLuint IMAGE_1D_ARRAY = 0x9052;
  static const GLuint IMAGE_2D = 0x904D;
  static const GLuint IMAGE_2D_ARRAY = 0x9053;
  static const GLuint IMAGE_2D_MULTISAMPLE = 0x9055;
  static const GLuint IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
  static const GLuint IMAGE_2D_RECT = 0x904F;
  static const GLuint IMAGE_3D = 0x904E;
  static const GLuint IMAGE_BINDING_ACCESS = 0x8F3E;
  static const GLuint IMAGE_BINDING_FORMAT = 0x906E;
  static const GLuint IMAGE_BINDING_LAYER = 0x8F3D;
  static const GLuint IMAGE_BINDING_LAYERED = 0x8F3C;
  static const GLuint IMAGE_BINDING_LEVEL = 0x8F3B;
  static const GLuint IMAGE_BINDING_NAME = 0x8F3A;
  static const GLuint IMAGE_BUFFER = 0x9051;
  static const GLuint IMAGE_CUBE = 0x9050;
  static const GLuint IMAGE_CUBE_MAP_ARRAY = 0x9054;
  static const GLuint IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
  static const GLuint IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
  static const GLuint IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
  static const GLuint INT_IMAGE_1D = 0x9057;
  static const GLuint INT_IMAGE_1D_ARRAY = 0x905D;
  static const GLuint INT_IMAGE_2D = 0x9058;
  static const GLuint INT_IMAGE_2D_ARRAY = 0x905E;
  static const GLuint INT_IMAGE_2D_MULTISAMPLE = 0x9060;
  static const GLuint INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
  static const GLuint INT_IMAGE_2D_RECT = 0x905A;
  static const GLuint INT_IMAGE_3D = 0x9059;
  static const GLuint INT_IMAGE_BUFFER = 0x905C;
  static const GLuint INT_IMAGE_CUBE = 0x905B;
  static const GLuint INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
  static const GLuint MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
  static const GLuint MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
  static const GLuint MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
  static const GLuint MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
  static const GLuint MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
  static const GLuint MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
  static const GLuint MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
  static const GLuint MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
  static const GLuint MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
  static const GLuint MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
  static const GLuint MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
  static const GLuint MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
  static const GLuint MAX_IMAGE_SAMPLES = 0x906D;
  static const GLuint MAX_IMAGE_UNITS = 0x8F38;
  static const GLuint MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
  static const GLuint MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
  static const GLuint MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
  static const GLuint MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
  static const GLuint MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
  static const GLuint MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
  static const GLuint MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
  static const GLuint MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
  static const GLuint MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
  static const GLuint MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
  static const GLuint NUM_SAMPLE_COUNTS = 0x9380;
  static const GLuint PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
  static const GLuint PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
  static const GLuint PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
  static const GLuint PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
  static const GLuint PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
  static const GLuint SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
  static const GLuint TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
  static const GLuint TEXTURE_IMMUTABLE_FORMAT = 0x912F;
  static const GLuint TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
  static const GLuint TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
  static const GLuint TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
  static const GLuint TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
  static const GLuint UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
  static const GLuint UNIFORM_BARRIER_BIT = 0x00000004;
  static const GLuint UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
  static const GLuint UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
  static const GLuint UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
  static const GLuint UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
  static const GLuint UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
  static const GLuint UNSIGNED_INT_IMAGE_1D = 0x9062;
  static const GLuint UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
  static const GLuint UNSIGNED_INT_IMAGE_2D = 0x9063;
  static const GLuint UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
  static const GLuint UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
  static const GLuint UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
  static const GLuint UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
  static const GLuint UNSIGNED_INT_IMAGE_3D = 0x9064;
  static const GLuint UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
  static const GLuint UNSIGNED_INT_IMAGE_CUBE = 0x9066;
  static const GLuint UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
  static const GLuint VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;

  // GL_VERSION_4_3
  static const GLuint ACTIVE_RESOURCES = 0x92F5;
  static const GLuint ACTIVE_VARIABLES = 0x9305;
  static const GLuint ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
  static const GLuint ARRAY_SIZE = 0x92FB;
  static const GLuint ARRAY_STRIDE = 0x92FE;
  static const GLuint ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
  static const GLuint ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
  static const GLuint AUTO_GENERATE_MIPMAP = 0x8295;
  static const GLuint BLOCK_INDEX = 0x92FD;
  static const GLuint BUFFER = 0x82E0;
  static const GLuint BUFFER_BINDING = 0x9302;
  static const GLuint BUFFER_DATA_SIZE = 0x9303;
  static const GLuint BUFFER_VARIABLE = 0x92E5;
  static const GLuint CAVEAT_SUPPORT = 0x82B8;
  static const GLuint CLEAR_BUFFER = 0x82B4;
  static const GLuint COLOR_COMPONENTS = 0x8283;
  static const GLuint COLOR_ENCODING = 0x8296;
  static const GLuint COLOR_RENDERABLE = 0x8286;
  static const GLuint COMPRESSED_R11_EAC = 0x9270;
  static const GLuint COMPRESSED_RG11_EAC = 0x9272;
  static const GLuint COMPRESSED_RGB8_ETC2 = 0x9274;
  static const GLuint COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
  static const GLuint COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
  static const GLuint COMPRESSED_SIGNED_R11_EAC = 0x9271;
  static const GLuint COMPRESSED_SIGNED_RG11_EAC = 0x9273;
  static const GLuint COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
  static const GLuint COMPRESSED_SRGB8_ETC2 = 0x9275;
  static const GLuint COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
  static const GLuint COMPUTE_SHADER = 0x91B9;
  static const GLuint COMPUTE_SHADER_BIT = 0x00000020;
  static const GLuint COMPUTE_SUBROUTINE = 0x92ED;
  static const GLuint COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
  static const GLuint COMPUTE_TEXTURE = 0x82A0;
  static const GLuint COMPUTE_WORK_GROUP_SIZE = 0x8267;
  static const GLuint CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
  static const GLuint DEBUG_CALLBACK_FUNCTION = 0x8244;
  static const GLuint DEBUG_CALLBACK_USER_PARAM = 0x8245;
  static const GLuint DEBUG_GROUP_STACK_DEPTH = 0x826D;
  static const GLuint DEBUG_LOGGED_MESSAGES = 0x9145;
  static const GLuint DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
  static const GLuint DEBUG_OUTPUT = 0x92E0;
  static const GLuint DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
  static const GLuint DEBUG_SEVERITY_HIGH = 0x9146;
  static const GLuint DEBUG_SEVERITY_LOW = 0x9148;
  static const GLuint DEBUG_SEVERITY_MEDIUM = 0x9147;
  static const GLuint DEBUG_SEVERITY_NOTIFICATION = 0x826B;
  static const GLuint DEBUG_SOURCE_API = 0x8246;
  static const GLuint DEBUG_SOURCE_APPLICATION = 0x824A;
  static const GLuint DEBUG_SOURCE_OTHER = 0x824B;
  static const GLuint DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
  static const GLuint DEBUG_SOURCE_THIRD_PARTY = 0x8249;
  static const GLuint DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
  static const GLuint DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
  static const GLuint DEBUG_TYPE_ERROR = 0x824C;
  static const GLuint DEBUG_TYPE_MARKER = 0x8268;
  static const GLuint DEBUG_TYPE_OTHER = 0x8251;
  static const GLuint DEBUG_TYPE_PERFORMANCE = 0x8250;
  static const GLuint DEBUG_TYPE_POP_GROUP = 0x826A;
  static const GLuint DEBUG_TYPE_PORTABILITY = 0x824F;
  static const GLuint DEBUG_TYPE_PUSH_GROUP = 0x8269;
  static const GLuint DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
  static const GLuint DEPTH_COMPONENTS = 0x8284;
  static const GLuint DEPTH_RENDERABLE = 0x8287;
  static const GLuint DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
  static const GLuint DISPATCH_INDIRECT_BUFFER = 0x90EE;
  static const GLuint DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
  static const GLuint FILTER = 0x829A;
  static const GLuint FRAGMENT_SUBROUTINE = 0x92EC;
  static const GLuint FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
  static const GLuint FRAGMENT_TEXTURE = 0x829F;
  static const GLuint FRAMEBUFFER_BLEND = 0x828B;
  static const GLuint FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
  static const GLuint FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
  static const GLuint FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
  static const GLuint FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
  static const GLuint FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
  static const GLuint FRAMEBUFFER_RENDERABLE = 0x8289;
  static const GLuint FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
  static const GLuint FULL_SUPPORT = 0x82B7;
  static const GLuint GEOMETRY_SUBROUTINE = 0x92EB;
  static const GLuint GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
  static const GLuint GEOMETRY_TEXTURE = 0x829E;
  static const GLuint GET_TEXTURE_IMAGE_FORMAT = 0x8291;
  static const GLuint GET_TEXTURE_IMAGE_TYPE = 0x8292;
  static const GLuint IMAGE_CLASS_10_10_10_2 = 0x82C3;
  static const GLuint IMAGE_CLASS_11_11_10 = 0x82C2;
  static const GLuint IMAGE_CLASS_1_X_16 = 0x82BE;
  static const GLuint IMAGE_CLASS_1_X_32 = 0x82BB;
  static const GLuint IMAGE_CLASS_1_X_8 = 0x82C1;
  static const GLuint IMAGE_CLASS_2_X_16 = 0x82BD;
  static const GLuint IMAGE_CLASS_2_X_32 = 0x82BA;
  static const GLuint IMAGE_CLASS_2_X_8 = 0x82C0;
  static const GLuint IMAGE_CLASS_4_X_16 = 0x82BC;
  static const GLuint IMAGE_CLASS_4_X_32 = 0x82B9;
  static const GLuint IMAGE_CLASS_4_X_8 = 0x82BF;
  static const GLuint IMAGE_COMPATIBILITY_CLASS = 0x82A8;
  static const GLuint IMAGE_PIXEL_FORMAT = 0x82A9;
  static const GLuint IMAGE_PIXEL_TYPE = 0x82AA;
  static const GLuint IMAGE_TEXEL_SIZE = 0x82A7;
  static const GLuint INTERNALFORMAT_ALPHA_SIZE = 0x8274;
  static const GLuint INTERNALFORMAT_ALPHA_TYPE = 0x827B;
  static const GLuint INTERNALFORMAT_BLUE_SIZE = 0x8273;
  static const GLuint INTERNALFORMAT_BLUE_TYPE = 0x827A;
  static const GLuint INTERNALFORMAT_DEPTH_SIZE = 0x8275;
  static const GLuint INTERNALFORMAT_DEPTH_TYPE = 0x827C;
  static const GLuint INTERNALFORMAT_GREEN_SIZE = 0x8272;
  static const GLuint INTERNALFORMAT_GREEN_TYPE = 0x8279;
  static const GLuint INTERNALFORMAT_PREFERRED = 0x8270;
  static const GLuint INTERNALFORMAT_RED_SIZE = 0x8271;
  static const GLuint INTERNALFORMAT_RED_TYPE = 0x8278;
  static const GLuint INTERNALFORMAT_SHARED_SIZE = 0x8277;
  static const GLuint INTERNALFORMAT_STENCIL_SIZE = 0x8276;
  static const GLuint INTERNALFORMAT_STENCIL_TYPE = 0x827D;
  static const GLuint INTERNALFORMAT_SUPPORTED = 0x826F;
  static const GLuint IS_PER_PATCH = 0x92E7;
  static const GLuint IS_ROW_MAJOR = 0x9300;
  static const GLuint LOCATION = 0x930E;
  static const GLuint LOCATION_INDEX = 0x930F;
  static const GLuint MANUAL_GENERATE_MIPMAP = 0x8294;
  static const GLuint MATRIX_STRIDE = 0x92FF;
  static const GLuint MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
  static const GLuint MAX_COMBINED_DIMENSIONS = 0x8282;
  static const GLuint MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
  static const GLuint MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
  static const GLuint MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
  static const GLuint MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
  static const GLuint MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
  static const GLuint MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
  static const GLuint MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
  static const GLuint MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
  static const GLuint MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
  static const GLuint MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
  static const GLuint MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
  static const GLuint MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
  static const GLuint MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
  static const GLuint MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
  static const GLuint MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
  static const GLuint MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
  static const GLuint MAX_DEPTH = 0x8280;
  static const GLuint MAX_ELEMENT_INDEX = 0x8D6B;
  static const GLuint MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
  static const GLuint MAX_FRAMEBUFFER_HEIGHT = 0x9316;
  static const GLuint MAX_FRAMEBUFFER_LAYERS = 0x9317;
  static const GLuint MAX_FRAMEBUFFER_SAMPLES = 0x9318;
  static const GLuint MAX_FRAMEBUFFER_WIDTH = 0x9315;
  static const GLuint MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
  static const GLuint MAX_HEIGHT = 0x827F;
  static const GLuint MAX_LABEL_LENGTH = 0x82E8;
  static const GLuint MAX_LAYERS = 0x8281;
  static const GLuint MAX_NAME_LENGTH = 0x92F6;
  static const GLuint MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
  static const GLuint MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
  static const GLuint MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
  static const GLuint MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
  static const GLuint MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
  static const GLuint MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
  static const GLuint MAX_UNIFORM_LOCATIONS = 0x826E;
  static const GLuint MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
  static const GLuint MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
  static const GLuint MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
  static const GLuint MAX_WIDTH = 0x827E;
  static const GLuint MIPMAP = 0x8293;
  static const GLuint NAME_LENGTH = 0x92F9;
  static const GLuint NUM_ACTIVE_VARIABLES = 0x9304;
  static const GLuint NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
  static const GLuint OFFSET = 0x92FC;
  static const GLuint PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
  static const GLuint PROGRAM = 0x82E2;
  static const GLuint PROGRAM_INPUT = 0x92E3;
  static const GLuint PROGRAM_OUTPUT = 0x92E4;
  static const GLuint PROGRAM_PIPELINE = 0x82E4;
  static const GLuint QUERY = 0x82E3;
  static const GLuint READ_PIXELS = 0x828C;
  static const GLuint READ_PIXELS_FORMAT = 0x828D;
  static const GLuint READ_PIXELS_TYPE = 0x828E;
  static const GLuint REFERENCED_BY_COMPUTE_SHADER = 0x930B;
  static const GLuint REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
  static const GLuint REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
  static const GLuint REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
  static const GLuint REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
  static const GLuint REFERENCED_BY_VERTEX_SHADER = 0x9306;
  static const GLuint SAMPLER = 0x82E6;
  static const GLuint SHADER = 0x82E1;
  static const GLuint SHADER_IMAGE_ATOMIC = 0x82A6;
  static const GLuint SHADER_IMAGE_LOAD = 0x82A4;
  static const GLuint SHADER_IMAGE_STORE = 0x82A5;
  static const GLuint SHADER_STORAGE_BARRIER_BIT = 0x00002000;
  static const GLuint SHADER_STORAGE_BLOCK = 0x92E6;
  static const GLuint SHADER_STORAGE_BUFFER = 0x90D2;
  static const GLuint SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
  static const GLuint SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
  static const GLuint SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
  static const GLuint SHADER_STORAGE_BUFFER_START = 0x90D4;
  static const GLuint SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
  static const GLuint SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
  static const GLuint SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
  static const GLuint SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
  static const GLuint SRGB_READ = 0x8297;
  static const GLuint SRGB_WRITE = 0x8298;
  static const GLuint STENCIL_COMPONENTS = 0x8285;
  static const GLuint STENCIL_RENDERABLE = 0x8288;
  static const GLuint TESS_CONTROL_SUBROUTINE = 0x92E9;
  static const GLuint TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
  static const GLuint TESS_CONTROL_TEXTURE = 0x829C;
  static const GLuint TESS_EVALUATION_SUBROUTINE = 0x92EA;
  static const GLuint TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
  static const GLuint TESS_EVALUATION_TEXTURE = 0x829D;
  static const GLuint TEXTURE_BUFFER_OFFSET = 0x919D;
  static const GLuint TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
  static const GLuint TEXTURE_BUFFER_SIZE = 0x919E;
  static const GLuint TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
  static const GLuint TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
  static const GLuint TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
  static const GLuint TEXTURE_GATHER = 0x82A2;
  static const GLuint TEXTURE_GATHER_SHADOW = 0x82A3;
  static const GLuint TEXTURE_IMAGE_FORMAT = 0x828F;
  static const GLuint TEXTURE_IMAGE_TYPE = 0x8290;
  static const GLuint TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
  static const GLuint TEXTURE_SHADOW = 0x82A1;
  static const GLuint TEXTURE_VIEW = 0x82B5;
  static const GLuint TEXTURE_VIEW_MIN_LAYER = 0x82DD;
  static const GLuint TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
  static const GLuint TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
  static const GLuint TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
  static const GLuint TOP_LEVEL_ARRAY_SIZE = 0x930C;
  static const GLuint TOP_LEVEL_ARRAY_STRIDE = 0x930D;
  static const GLuint TRANSFORM_FEEDBACK_VARYING = 0x92F4;
  static const GLuint TYPE = 0x92FA;
  static const GLuint UNIFORM = 0x92E1;
  static const GLuint UNIFORM_BLOCK = 0x92E2;
  static const GLuint UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
  static const GLuint VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
  static const GLuint VERTEX_ATTRIB_BINDING = 0x82D4;
  static const GLuint VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
  static const GLuint VERTEX_BINDING_BUFFER = 0x8F4F;
  static const GLuint VERTEX_BINDING_DIVISOR = 0x82D6;
  static const GLuint VERTEX_BINDING_OFFSET = 0x82D7;
  static const GLuint VERTEX_BINDING_STRIDE = 0x82D8;
  static const GLuint VERTEX_SUBROUTINE = 0x92E8;
  static const GLuint VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
  static const GLuint VERTEX_TEXTURE = 0x829B;
  static const GLuint VIEW_CLASS_128_BITS = 0x82C4;
  static const GLuint VIEW_CLASS_16_BITS = 0x82CA;
  static const GLuint VIEW_CLASS_24_BITS = 0x82C9;
  static const GLuint VIEW_CLASS_32_BITS = 0x82C8;
  static const GLuint VIEW_CLASS_48_BITS = 0x82C7;
  static const GLuint VIEW_CLASS_64_BITS = 0x82C6;
  static const GLuint VIEW_CLASS_8_BITS = 0x82CB;
  static const GLuint VIEW_CLASS_96_BITS = 0x82C5;
  static const GLuint VIEW_CLASS_BPTC_FLOAT = 0x82D3;
  static const GLuint VIEW_CLASS_BPTC_UNORM = 0x82D2;
  static const GLuint VIEW_CLASS_RGTC1_RED = 0x82D0;
  static const GLuint VIEW_CLASS_RGTC2_RG = 0x82D1;
  static const GLuint VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
  static const GLuint VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
  static const GLuint VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
  static const GLuint VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
  static const GLuint VIEW_COMPATIBILITY_CLASS = 0x82B6;

  // GL_VERSION_4_4
  static const GLuint BUFFER_IMMUTABLE_STORAGE = 0x821F;
  static const GLuint BUFFER_STORAGE_FLAGS = 0x8220;
  static const GLuint CLEAR_TEXTURE = 0x9365;
  static const GLuint CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
  static const GLuint CLIENT_STORAGE_BIT = 0x0200;
  static const GLuint DYNAMIC_STORAGE_BIT = 0x0100;
  static const GLuint LOCATION_COMPONENT = 0x934A;
  static const GLuint MAP_COHERENT_BIT = 0x0080;
  static const GLuint MAP_PERSISTENT_BIT = 0x0040;
  static const GLuint MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
  static const GLuint MIRROR_CLAMP_TO_EDGE = 0x8743;
  static const GLuint PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
  static const GLuint QUERY_BUFFER = 0x9192;
  static const GLuint QUERY_BUFFER_BARRIER_BIT = 0x00008000;
  static const GLuint QUERY_BUFFER_BINDING = 0x9193;
  static const GLuint QUERY_RESULT_NO_WAIT = 0x9194;
  static const GLuint TEXTURE_BUFFER_BINDING = 0x8C2A;
  static const GLuint TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
  static const GLuint TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;

  // GL_VERSION_4_5
  static const GLuint CLIP_DEPTH_MODE = 0x935D;
  static const GLuint CLIP_ORIGIN = 0x935C;
  static const GLuint CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
  static const GLuint CONTEXT_LOST = 0x0507;
  static const GLuint CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
  static const GLuint CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
  static const GLuint GUILTY_CONTEXT_RESET = 0x8253;
  static const GLuint INNOCENT_CONTEXT_RESET = 0x8254;
  static const GLuint LOSE_CONTEXT_ON_RESET = 0x8252;
  static const GLuint MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
  static const GLuint MAX_CULL_DISTANCES = 0x82F9;
  static const GLuint NEGATIVE_ONE_TO_ONE = 0x935E;
  static const GLuint NO_RESET_NOTIFICATION = 0x8261;
  static const GLuint QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
  static const GLuint QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
  static const GLuint QUERY_NO_WAIT_INVERTED = 0x8E18;
  static const GLuint QUERY_TARGET = 0x82EA;
  static const GLuint QUERY_WAIT_INVERTED = 0x8E17;
  static const GLuint RESET_NOTIFICATION_STRATEGY = 0x8256;
  static const GLuint TEXTURE_TARGET = 0x1006;
  static const GLuint UNKNOWN_CONTEXT_RESET = 0x8255;
  static const GLuint ZERO_TO_ONE = 0x935F;
}
//-----------------------------------------------------------------------------
namespace NOpenGLProc
{
  enum EProcType
  {
    TYPE_NOT_LOADED = 0,
    TYPE_CORE,
    TYPE_ARB,
    TYPE_EXT
  };

  typedef void (APIENTRY *TDebugCallback)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *message, const void *userParam);

  // GL_VERSION_1_2
  typedef void (APIENTRY *TCopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  typedef void (APIENTRY *TDrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
  typedef void (APIENTRY *TTexImage3D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
  typedef void (APIENTRY *TTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);

  // GL_VERSION_1_3
  typedef void (APIENTRY *TActiveTexture)(GLenum texture);
  typedef void (APIENTRY *TCompressedTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
  typedef void (APIENTRY *TCompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
  typedef void (APIENTRY *TCompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
  typedef void (APIENTRY *TCompressedTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
  typedef void (APIENTRY *TCompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
  typedef void (APIENTRY *TCompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
  typedef void (APIENTRY *TGetCompressedTexImage)(GLenum target, GLint level, void *img);
  typedef void (APIENTRY *TSampleCoverage)(GLfloat value, GLboolean invert);

  // GL_VERSION_1_4
  typedef void (APIENTRY *TBlendColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
  typedef void (APIENTRY *TBlendEquation)(GLenum mode);
  typedef void (APIENTRY *TBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
  typedef void (APIENTRY *TMultiDrawArrays)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
  typedef void (APIENTRY *TMultiDrawElements)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
  typedef void (APIENTRY *TPointParameterf)(GLenum pname, GLfloat param);
  typedef void (APIENTRY *TPointParameterfv)(GLenum pname, const GLfloat *params);
  typedef void (APIENTRY *TPointParameteri)(GLenum pname, GLint param);
  typedef void (APIENTRY *TPointParameteriv)(GLenum pname, const GLint *params);

  // GL_VERSION_1_5
  typedef void (APIENTRY *TBeginQuery)(GLenum target, GLuint id);
  typedef void (APIENTRY *TBindBuffer)(GLenum target, GLuint buffer);
  typedef void (APIENTRY *TBufferData)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
  typedef void (APIENTRY *TBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
  typedef void (APIENTRY *TDeleteBuffers)(GLsizei n, const GLuint *buffers);
  typedef void (APIENTRY *TDeleteQueries)(GLsizei n, const GLuint *ids);
  typedef void (APIENTRY *TEndQuery)(GLenum target);
  typedef void (APIENTRY *TGenBuffers)(GLsizei n, GLuint *buffers);
  typedef void (APIENTRY *TGenQueries)(GLsizei n, GLuint *ids);
  typedef void (APIENTRY *TGetBufferParameteriv)(GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetBufferPointerv)(GLenum target, GLenum pname, void **params);
  typedef void (APIENTRY *TGetBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
  typedef void (APIENTRY *TGetQueryObjectiv)(GLuint id, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetQueryObjectuiv)(GLuint id, GLenum pname, GLuint *params);
  typedef void (APIENTRY *TGetQueryiv)(GLenum target, GLenum pname, GLint *params);
  typedef GLboolean (APIENTRY *TIsBuffer)(GLuint buffer);
  typedef GLboolean (APIENTRY *TIsQuery)(GLuint id);
  typedef void *(APIENTRY *TMapBuffer)(GLenum target, GLenum access);
  typedef GLboolean (APIENTRY *TUnmapBuffer)(GLenum target);

  // GL_VERSION_2_0
  typedef void (APIENTRY *TAttachShader)(GLuint program, GLuint shader);
  typedef void (APIENTRY *TBindAttribLocation)(GLuint program, GLuint index, const GLchar *name);
  typedef void (APIENTRY *TBlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);
  typedef void (APIENTRY *TCompileShader)(GLuint shader);
  typedef GLuint (APIENTRY *TCreateProgram)(void);
  typedef GLuint (APIENTRY *TCreateShader)(GLenum type);
  typedef void (APIENTRY *TDeleteProgram)(GLuint program);
  typedef void (APIENTRY *TDeleteShader)(GLuint shader);
  typedef void (APIENTRY *TDetachShader)(GLuint program, GLuint shader);
  typedef void (APIENTRY *TDisableVertexAttribArray)(GLuint index);
  typedef void (APIENTRY *TDrawBuffers)(GLsizei n, const GLenum *bufs);
  typedef void (APIENTRY *TEnableVertexAttribArray)(GLuint index);
  typedef void (APIENTRY *TGetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
  typedef void (APIENTRY *TGetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
  typedef void (APIENTRY *TGetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
  typedef GLint (APIENTRY *TGetAttribLocation)(GLuint program, const GLchar *name);
  typedef void (APIENTRY *TGetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
  typedef void (APIENTRY *TGetProgramiv)(GLuint program, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
  typedef void (APIENTRY *TGetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
  typedef void (APIENTRY *TGetShaderiv)(GLuint shader, GLenum pname, GLint *params);
  typedef GLint (APIENTRY *TGetUniformLocation)(GLuint program, const GLchar *name);
  typedef void (APIENTRY *TGetUniformfv)(GLuint program, GLint location, GLfloat *params);
  typedef void (APIENTRY *TGetUniformiv)(GLuint program, GLint location, GLint *params);
  typedef void (APIENTRY *TGetVertexAttribPointerv)(GLuint index, GLenum pname, void **pointer);
  typedef void (APIENTRY *TGetVertexAttribdv)(GLuint index, GLenum pname, GLdouble *params);
  typedef void (APIENTRY *TGetVertexAttribfv)(GLuint index, GLenum pname, GLfloat *params);
  typedef void (APIENTRY *TGetVertexAttribiv)(GLuint index, GLenum pname, GLint *params);
  typedef GLboolean (APIENTRY *TIsProgram)(GLuint program);
  typedef GLboolean (APIENTRY *TIsShader)(GLuint shader);
  typedef void (APIENTRY *TLinkProgram)(GLuint program);
  typedef void (APIENTRY *TShaderSource)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
  typedef void (APIENTRY *TStencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask);
  typedef void (APIENTRY *TStencilMaskSeparate)(GLenum face, GLuint mask);
  typedef void (APIENTRY *TStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
  typedef void (APIENTRY *TUniform1f)(GLint location, GLfloat v0);
  typedef void (APIENTRY *TUniform1fv)(GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRY *TUniform1i)(GLint location, GLint v0);
  typedef void (APIENTRY *TUniform1iv)(GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRY *TUniform2f)(GLint location, GLfloat v0, GLfloat v1);
  typedef void (APIENTRY *TUniform2fv)(GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRY *TUniform2i)(GLint location, GLint v0, GLint v1);
  typedef void (APIENTRY *TUniform2iv)(GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRY *TUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
  typedef void (APIENTRY *TUniform3fv)(GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRY *TUniform3i)(GLint location, GLint v0, GLint v1, GLint v2);
  typedef void (APIENTRY *TUniform3iv)(GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRY *TUniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
  typedef void (APIENTRY *TUniform4fv)(GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRY *TUniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
  typedef void (APIENTRY *TUniform4iv)(GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRY *TUniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TUniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TUniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TUseProgram)(GLuint program);
  typedef void (APIENTRY *TValidateProgram)(GLuint program);
  typedef void (APIENTRY *TVertexAttrib1d)(GLuint index, GLdouble x);
  typedef void (APIENTRY *TVertexAttrib1dv)(GLuint index, const GLdouble *v);
  typedef void (APIENTRY *TVertexAttrib1f)(GLuint index, GLfloat x);
  typedef void (APIENTRY *TVertexAttrib1fv)(GLuint index, const GLfloat *v);
  typedef void (APIENTRY *TVertexAttrib1s)(GLuint index, GLshort x);
  typedef void (APIENTRY *TVertexAttrib1sv)(GLuint index, const GLshort *v);
  typedef void (APIENTRY *TVertexAttrib2d)(GLuint index, GLdouble x, GLdouble y);
  typedef void (APIENTRY *TVertexAttrib2dv)(GLuint index, const GLdouble *v);
  typedef void (APIENTRY *TVertexAttrib2f)(GLuint index, GLfloat x, GLfloat y);
  typedef void (APIENTRY *TVertexAttrib2fv)(GLuint index, const GLfloat *v);
  typedef void (APIENTRY *TVertexAttrib2s)(GLuint index, GLshort x, GLshort y);
  typedef void (APIENTRY *TVertexAttrib2sv)(GLuint index, const GLshort *v);
  typedef void (APIENTRY *TVertexAttrib3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
  typedef void (APIENTRY *TVertexAttrib3dv)(GLuint index, const GLdouble *v);
  typedef void (APIENTRY *TVertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRY *TVertexAttrib3fv)(GLuint index, const GLfloat *v);
  typedef void (APIENTRY *TVertexAttrib3s)(GLuint index, GLshort x, GLshort y, GLshort z);
  typedef void (APIENTRY *TVertexAttrib3sv)(GLuint index, const GLshort *v);
  typedef void (APIENTRY *TVertexAttrib4Nbv)(GLuint index, const GLbyte *v);
  typedef void (APIENTRY *TVertexAttrib4Niv)(GLuint index, const GLint *v);
  typedef void (APIENTRY *TVertexAttrib4Nsv)(GLuint index, const GLshort *v);
  typedef void (APIENTRY *TVertexAttrib4Nub)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
  typedef void (APIENTRY *TVertexAttrib4Nubv)(GLuint index, const GLubyte *v);
  typedef void (APIENTRY *TVertexAttrib4Nuiv)(GLuint index, const GLuint *v);
  typedef void (APIENTRY *TVertexAttrib4Nusv)(GLuint index, const GLushort *v);
  typedef void (APIENTRY *TVertexAttrib4bv)(GLuint index, const GLbyte *v);
  typedef void (APIENTRY *TVertexAttrib4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  typedef void (APIENTRY *TVertexAttrib4dv)(GLuint index, const GLdouble *v);
  typedef void (APIENTRY *TVertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  typedef void (APIENTRY *TVertexAttrib4fv)(GLuint index, const GLfloat *v);
  typedef void (APIENTRY *TVertexAttrib4iv)(GLuint index, const GLint *v);
  typedef void (APIENTRY *TVertexAttrib4s)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
  typedef void (APIENTRY *TVertexAttrib4sv)(GLuint index, const GLshort *v);
  typedef void (APIENTRY *TVertexAttrib4ubv)(GLuint index, const GLubyte *v);
  typedef void (APIENTRY *TVertexAttrib4uiv)(GLuint index, const GLuint *v);
  typedef void (APIENTRY *TVertexAttrib4usv)(GLuint index, const GLushort *v);
  typedef void (APIENTRY *TVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);

  // GL_VERSION_2_1
  typedef void (APIENTRY *TUniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TUniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TUniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TUniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TUniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TUniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);

  // GL_VERSION_3_0
  typedef void (APIENTRY *TBeginConditionalRender)(GLuint id, GLenum mode);
  typedef void (APIENTRY *TBeginTransformFeedback)(GLenum primitiveMode);
  typedef void (APIENTRY *TBindBufferBase)(GLenum target, GLuint index, GLuint buffer);
  typedef void (APIENTRY *TBindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
  typedef void (APIENTRY *TBindFragDataLocation)(GLuint program, GLuint color, const GLchar *name);
  typedef void (APIENTRY *TBindFramebuffer)(GLenum target, GLuint framebuffer);
  typedef void (APIENTRY *TBindRenderbuffer)(GLenum target, GLuint renderbuffer);
  typedef void (APIENTRY *TBindVertexArray)(GLuint array);
  typedef void (APIENTRY *TBlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
  typedef GLenum (APIENTRY *TCheckFramebufferStatus)(GLenum target);
  typedef void (APIENTRY *TClampColor)(GLenum target, GLenum clamp);
  typedef void (APIENTRY *TClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
  typedef void (APIENTRY *TClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
  typedef void (APIENTRY *TClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint *value);
  typedef void (APIENTRY *TClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint *value);
  typedef void (APIENTRY *TColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
  typedef void (APIENTRY *TDeleteFramebuffers)(GLsizei n, const GLuint *framebuffers);
  typedef void (APIENTRY *TDeleteRenderbuffers)(GLsizei n, const GLuint *renderbuffers);
  typedef void (APIENTRY *TDeleteVertexArrays)(GLsizei n, const GLuint *arrays);
  typedef void (APIENTRY *TDisablei)(GLenum target, GLuint index);
  typedef void (APIENTRY *TEnablei)(GLenum target, GLuint index);
  typedef void (APIENTRY *TEndConditionalRender)(void);
  typedef void (APIENTRY *TEndTransformFeedback)(void);
  typedef void (APIENTRY *TFlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length);
  typedef void (APIENTRY *TFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
  typedef void (APIENTRY *TFramebufferTexture1D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
  typedef void (APIENTRY *TFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
  typedef void (APIENTRY *TFramebufferTexture3D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
  typedef void (APIENTRY *TFramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
  typedef void (APIENTRY *TGenFramebuffers)(GLsizei n, GLuint *framebuffers);
  typedef void (APIENTRY *TGenRenderbuffers)(GLsizei n, GLuint *renderbuffers);
  typedef void (APIENTRY *TGenVertexArrays)(GLsizei n, GLuint *arrays);
  typedef void (APIENTRY *TGenerateMipmap)(GLenum target);
  typedef void (APIENTRY *TGetBooleani_v)(GLenum target, GLuint index, GLboolean *data);
  typedef GLint (APIENTRY *TGetFragDataLocation)(GLuint program, const GLchar *name);
  typedef void (APIENTRY *TGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetIntegeri_v)(GLenum target, GLuint index, GLint *data);
  typedef void (APIENTRY *TGetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint *params);
  typedef const GLubyte *(APIENTRY *TGetStringi)(GLenum name, GLuint index);
  typedef void (APIENTRY *TGetTexParameterIiv)(GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetTexParameterIuiv)(GLenum target, GLenum pname, GLuint *params);
  typedef void (APIENTRY *TGetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
  typedef void (APIENTRY *TGetUniformuiv)(GLuint program, GLint location, GLuint *params);
  typedef void (APIENTRY *TGetVertexAttribIiv)(GLuint index, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint *params);
  typedef GLboolean (APIENTRY *TIsEnabledi)(GLenum target, GLuint index);
  typedef GLboolean (APIENTRY *TIsFramebuffer)(GLuint framebuffer);
  typedef GLboolean (APIENTRY *TIsRenderbuffer)(GLuint renderbuffer);
  typedef GLboolean (APIENTRY *TIsVertexArray)(GLuint array);
  typedef void *(APIENTRY *TMapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
  typedef void (APIENTRY *TRenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
  typedef void (APIENTRY *TRenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
  typedef void (APIENTRY *TTexParameterIiv)(GLenum target, GLenum pname, const GLint *params);
  typedef void (APIENTRY *TTexParameterIuiv)(GLenum target, GLenum pname, const GLuint *params);
  typedef void (APIENTRY *TTransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
  typedef void (APIENTRY *TUniform1ui)(GLint location, GLuint v0);
  typedef void (APIENTRY *TUniform1uiv)(GLint location, GLsizei count, const GLuint *value);
  typedef void (APIENTRY *TUniform2ui)(GLint location, GLuint v0, GLuint v1);
  typedef void (APIENTRY *TUniform2uiv)(GLint location, GLsizei count, const GLuint *value);
  typedef void (APIENTRY *TUniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2);
  typedef void (APIENTRY *TUniform3uiv)(GLint location, GLsizei count, const GLuint *value);
  typedef void (APIENTRY *TUniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
  typedef void (APIENTRY *TUniform4uiv)(GLint location, GLsizei count, const GLuint *value);
  typedef void (APIENTRY *TVertexAttribI1i)(GLuint index, GLint x);
  typedef void (APIENTRY *TVertexAttribI1iv)(GLuint index, const GLint *v);
  typedef void (APIENTRY *TVertexAttribI1ui)(GLuint index, GLuint x);
  typedef void (APIENTRY *TVertexAttribI1uiv)(GLuint index, const GLuint *v);
  typedef void (APIENTRY *TVertexAttribI2i)(GLuint index, GLint x, GLint y);
  typedef void (APIENTRY *TVertexAttribI2iv)(GLuint index, const GLint *v);
  typedef void (APIENTRY *TVertexAttribI2ui)(GLuint index, GLuint x, GLuint y);
  typedef void (APIENTRY *TVertexAttribI2uiv)(GLuint index, const GLuint *v);
  typedef void (APIENTRY *TVertexAttribI3i)(GLuint index, GLint x, GLint y, GLint z);
  typedef void (APIENTRY *TVertexAttribI3iv)(GLuint index, const GLint *v);
  typedef void (APIENTRY *TVertexAttribI3ui)(GLuint index, GLuint x, GLuint y, GLuint z);
  typedef void (APIENTRY *TVertexAttribI3uiv)(GLuint index, const GLuint *v);
  typedef void (APIENTRY *TVertexAttribI4bv)(GLuint index, const GLbyte *v);
  typedef void (APIENTRY *TVertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w);
  typedef void (APIENTRY *TVertexAttribI4iv)(GLuint index, const GLint *v);
  typedef void (APIENTRY *TVertexAttribI4sv)(GLuint index, const GLshort *v);
  typedef void (APIENTRY *TVertexAttribI4ubv)(GLuint index, const GLubyte *v);
  typedef void (APIENTRY *TVertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
  typedef void (APIENTRY *TVertexAttribI4uiv)(GLuint index, const GLuint *v);
  typedef void (APIENTRY *TVertexAttribI4usv)(GLuint index, const GLushort *v);
  typedef void (APIENTRY *TVertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);

  // GL_VERSION_3_1
  typedef void (APIENTRY *TCopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
  typedef void (APIENTRY *TDrawArraysInstanced)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
  typedef void (APIENTRY *TDrawElementsInstanced)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
  typedef void (APIENTRY *TGetActiveUniformBlockName)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
  typedef void (APIENTRY *TGetActiveUniformBlockiv)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetActiveUniformName)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
  typedef void (APIENTRY *TGetActiveUniformsiv)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
  typedef GLuint (APIENTRY *TGetUniformBlockIndex)(GLuint program, const GLchar *uniformBlockName);
  typedef void (APIENTRY *TGetUniformIndices)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
  typedef void (APIENTRY *TPrimitiveRestartIndex)(GLuint index);
  typedef void (APIENTRY *TTexBuffer)(GLenum target, GLenum internalformat, GLuint buffer);
  typedef void (APIENTRY *TUniformBlockBinding)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);

  // GL_VERSION_3_2
  typedef GLenum (APIENTRY *TClientWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
  typedef void (APIENTRY *TDeleteSync)(GLsync sync);
  typedef void (APIENTRY *TDrawElementsBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
  typedef void (APIENTRY *TDrawElementsInstancedBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
  typedef void (APIENTRY *TDrawRangeElementsBaseVertex)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
  typedef GLsync (APIENTRY *TFenceSync)(GLenum condition, GLbitfield flags);
  typedef void (APIENTRY *TFramebufferTexture)(GLenum target, GLenum attachment, GLuint texture, GLint level);
  typedef void (APIENTRY *TGetBufferParameteri64v)(GLenum target, GLenum pname, GLint64 *params);
  typedef void (APIENTRY *TGetInteger64i_v)(GLenum target, GLuint index, GLint64 *data);
  typedef void (APIENTRY *TGetInteger64v)(GLenum pname, GLint64 *data);
  typedef void (APIENTRY *TGetMultisamplefv)(GLenum pname, GLuint index, GLfloat *val);
  typedef void (APIENTRY *TGetSynciv)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
  typedef GLboolean (APIENTRY *TIsSync)(GLsync sync);
  typedef void (APIENTRY *TMultiDrawElementsBaseVertex)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
  typedef void (APIENTRY *TProvokingVertex)(GLenum mode);
  typedef void (APIENTRY *TSampleMaski)(GLuint maskNumber, GLbitfield mask);
  typedef void (APIENTRY *TTexImage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
  typedef void (APIENTRY *TTexImage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
  typedef void (APIENTRY *TWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);

  // GL_VERSION_3_3
  typedef void (APIENTRY *TBindFragDataLocationIndexed)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
  typedef void (APIENTRY *TBindSampler)(GLuint unit, GLuint sampler);
  typedef void (APIENTRY *TDeleteSamplers)(GLsizei count, const GLuint *samplers);
  typedef void (APIENTRY *TGenSamplers)(GLsizei count, GLuint *samplers);
  typedef GLint (APIENTRY *TGetFragDataIndex)(GLuint program, const GLchar *name);
  typedef void (APIENTRY *TGetQueryObjecti64v)(GLuint id, GLenum pname, GLint64 *params);
  typedef void (APIENTRY *TGetQueryObjectui64v)(GLuint id, GLenum pname, GLuint64 *params);
  typedef void (APIENTRY *TGetSamplerParameterIiv)(GLuint sampler, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetSamplerParameterIuiv)(GLuint sampler, GLenum pname, GLuint *params);
  typedef void (APIENTRY *TGetSamplerParameterfv)(GLuint sampler, GLenum pname, GLfloat *params);
  typedef void (APIENTRY *TGetSamplerParameteriv)(GLuint sampler, GLenum pname, GLint *params);
  typedef GLboolean (APIENTRY *TIsSampler)(GLuint sampler);
  typedef void (APIENTRY *TQueryCounter)(GLuint id, GLenum target);
  typedef void (APIENTRY *TSamplerParameterIiv)(GLuint sampler, GLenum pname, const GLint *param);
  typedef void (APIENTRY *TSamplerParameterIuiv)(GLuint sampler, GLenum pname, const GLuint *param);
  typedef void (APIENTRY *TSamplerParameterf)(GLuint sampler, GLenum pname, GLfloat param);
  typedef void (APIENTRY *TSamplerParameterfv)(GLuint sampler, GLenum pname, const GLfloat *param);
  typedef void (APIENTRY *TSamplerParameteri)(GLuint sampler, GLenum pname, GLint param);
  typedef void (APIENTRY *TSamplerParameteriv)(GLuint sampler, GLenum pname, const GLint *param);
  typedef void (APIENTRY *TVertexAttribDivisor)(GLuint index, GLuint divisor);
  typedef void (APIENTRY *TVertexAttribP1ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
  typedef void (APIENTRY *TVertexAttribP1uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
  typedef void (APIENTRY *TVertexAttribP2ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
  typedef void (APIENTRY *TVertexAttribP2uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
  typedef void (APIENTRY *TVertexAttribP3ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
  typedef void (APIENTRY *TVertexAttribP3uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
  typedef void (APIENTRY *TVertexAttribP4ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
  typedef void (APIENTRY *TVertexAttribP4uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);

  // GL_VERSION_4_0
  typedef void (APIENTRY *TBeginQueryIndexed)(GLenum target, GLuint index, GLuint id);
  typedef void (APIENTRY *TBindTransformFeedback)(GLenum target, GLuint id);
  typedef void (APIENTRY *TBlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
  typedef void (APIENTRY *TBlendEquationi)(GLuint buf, GLenum mode);
  typedef void (APIENTRY *TBlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  typedef void (APIENTRY *TBlendFunci)(GLuint buf, GLenum src, GLenum dst);
  typedef void (APIENTRY *TDeleteTransformFeedbacks)(GLsizei n, const GLuint *ids);
  typedef void (APIENTRY *TDrawArraysIndirect)(GLenum mode, const void *indirect);
  typedef void (APIENTRY *TDrawElementsIndirect)(GLenum mode, GLenum type, const void *indirect);
  typedef void (APIENTRY *TDrawTransformFeedback)(GLenum mode, GLuint id);
  typedef void (APIENTRY *TDrawTransformFeedbackStream)(GLenum mode, GLuint id, GLuint stream);
  typedef void (APIENTRY *TEndQueryIndexed)(GLenum target, GLuint index);
  typedef void (APIENTRY *TGenTransformFeedbacks)(GLsizei n, GLuint *ids);
  typedef void (APIENTRY *TGetActiveSubroutineName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
  typedef void (APIENTRY *TGetActiveSubroutineUniformName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
  typedef void (APIENTRY *TGetActiveSubroutineUniformiv)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
  typedef void (APIENTRY *TGetProgramStageiv)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
  typedef void (APIENTRY *TGetQueryIndexediv)(GLenum target, GLuint index, GLenum pname, GLint *params);
  typedef GLuint (APIENTRY *TGetSubroutineIndex)(GLuint program, GLenum shadertype, const GLchar *name);
  typedef GLint (APIENTRY *TGetSubroutineUniformLocation)(GLuint program, GLenum shadertype, const GLchar *name);
  typedef void (APIENTRY *TGetUniformSubroutineuiv)(GLenum shadertype, GLint location, GLuint *params);
  typedef void (APIENTRY *TGetUniformdv)(GLuint program, GLint location, GLdouble *params);
  typedef GLboolean (APIENTRY *TIsTransformFeedback)(GLuint id);
  typedef void (APIENTRY *TMinSampleShading)(GLfloat value);
  typedef void (APIENTRY *TPatchParameterfv)(GLenum pname, const GLfloat *values);
  typedef void (APIENTRY *TPatchParameteri)(GLenum pname, GLint value);
  typedef void (APIENTRY *TPauseTransformFeedback)(void);
  typedef void (APIENTRY *TResumeTransformFeedback)(void);
  typedef void (APIENTRY *TUniform1d)(GLint location, GLdouble x);
  typedef void (APIENTRY *TUniform1dv)(GLint location, GLsizei count, const GLdouble *value);
  typedef void (APIENTRY *TUniform2d)(GLint location, GLdouble x, GLdouble y);
  typedef void (APIENTRY *TUniform2dv)(GLint location, GLsizei count, const GLdouble *value);
  typedef void (APIENTRY *TUniform3d)(GLint location, GLdouble x, GLdouble y, GLdouble z);
  typedef void (APIENTRY *TUniform3dv)(GLint location, GLsizei count, const GLdouble *value);
  typedef void (APIENTRY *TUniform4d)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  typedef void (APIENTRY *TUniform4dv)(GLint location, GLsizei count, const GLdouble *value);
  typedef void (APIENTRY *TUniformMatrix2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TUniformMatrix2x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TUniformMatrix2x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TUniformMatrix3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TUniformMatrix3x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TUniformMatrix3x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TUniformMatrix4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TUniformMatrix4x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TUniformMatrix4x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TUniformSubroutinesuiv)(GLenum shadertype, GLsizei count, const GLuint *indices);

  // GL_VERSION_4_1
  typedef void (APIENTRY *TActiveShaderProgram)(GLuint pipeline, GLuint program);
  typedef void (APIENTRY *TBindProgramPipeline)(GLuint pipeline);
  typedef void (APIENTRY *TClearDepthf)(GLfloat d);
  typedef GLuint (APIENTRY *TCreateShaderProgramv)(GLenum type, GLsizei count, const GLchar *const*strings);
  typedef void (APIENTRY *TDeleteProgramPipelines)(GLsizei n, const GLuint *pipelines);
  typedef void (APIENTRY *TDepthRangeArrayv)(GLuint first, GLsizei count, const GLdouble *v);
  typedef void (APIENTRY *TDepthRangeIndexed)(GLuint index, GLdouble n, GLdouble f);
  typedef void (APIENTRY *TDepthRangef)(GLfloat n, GLfloat f);
  typedef void (APIENTRY *TGenProgramPipelines)(GLsizei n, GLuint *pipelines);
  typedef void (APIENTRY *TGetDoublei_v)(GLenum target, GLuint index, GLdouble *data);
  typedef void (APIENTRY *TGetFloati_v)(GLenum target, GLuint index, GLfloat *data);
  typedef void (APIENTRY *TGetProgramBinary)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
  typedef void (APIENTRY *TGetProgramPipelineInfoLog)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
  typedef void (APIENTRY *TGetProgramPipelineiv)(GLuint pipeline, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
  typedef void (APIENTRY *TGetVertexAttribLdv)(GLuint index, GLenum pname, GLdouble *params);
  typedef GLboolean (APIENTRY *TIsProgramPipeline)(GLuint pipeline);
  typedef void (APIENTRY *TProgramBinary)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
  typedef void (APIENTRY *TProgramParameteri)(GLuint program, GLenum pname, GLint value);
  typedef void (APIENTRY *TProgramUniform1d)(GLuint program, GLint location, GLdouble v0);
  typedef void (APIENTRY *TProgramUniform1dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
  typedef void (APIENTRY *TProgramUniform1f)(GLuint program, GLint location, GLfloat v0);
  typedef void (APIENTRY *TProgramUniform1fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRY *TProgramUniform1i)(GLuint program, GLint location, GLint v0);
  typedef void (APIENTRY *TProgramUniform1iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRY *TProgramUniform1ui)(GLuint program, GLint location, GLuint v0);
  typedef void (APIENTRY *TProgramUniform1uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
  typedef void (APIENTRY *TProgramUniform2d)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
  typedef void (APIENTRY *TProgramUniform2dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
  typedef void (APIENTRY *TProgramUniform2f)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
  typedef void (APIENTRY *TProgramUniform2fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRY *TProgramUniform2i)(GLuint program, GLint location, GLint v0, GLint v1);
  typedef void (APIENTRY *TProgramUniform2iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRY *TProgramUniform2ui)(GLuint program, GLint location, GLuint v0, GLuint v1);
  typedef void (APIENTRY *TProgramUniform2uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
  typedef void (APIENTRY *TProgramUniform3d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
  typedef void (APIENTRY *TProgramUniform3dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
  typedef void (APIENTRY *TProgramUniform3f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
  typedef void (APIENTRY *TProgramUniform3fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRY *TProgramUniform3i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
  typedef void (APIENTRY *TProgramUniform3iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRY *TProgramUniform3ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
  typedef void (APIENTRY *TProgramUniform3uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
  typedef void (APIENTRY *TProgramUniform4d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
  typedef void (APIENTRY *TProgramUniform4dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
  typedef void (APIENTRY *TProgramUniform4f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
  typedef void (APIENTRY *TProgramUniform4fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRY *TProgramUniform4i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
  typedef void (APIENTRY *TProgramUniform4iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRY *TProgramUniform4ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
  typedef void (APIENTRY *TProgramUniform4uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
  typedef void (APIENTRY *TProgramUniformMatrix2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TProgramUniformMatrix2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TProgramUniformMatrix2x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TProgramUniformMatrix2x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TProgramUniformMatrix2x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TProgramUniformMatrix2x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TProgramUniformMatrix3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TProgramUniformMatrix3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TProgramUniformMatrix3x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TProgramUniformMatrix3x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TProgramUniformMatrix3x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TProgramUniformMatrix3x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TProgramUniformMatrix4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TProgramUniformMatrix4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TProgramUniformMatrix4x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TProgramUniformMatrix4x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TProgramUniformMatrix4x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  typedef void (APIENTRY *TProgramUniformMatrix4x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRY *TReleaseShaderCompiler)(void);
  typedef void (APIENTRY *TScissorArrayv)(GLuint first, GLsizei count, const GLint *v);
  typedef void (APIENTRY *TScissorIndexed)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
  typedef void (APIENTRY *TScissorIndexedv)(GLuint index, const GLint *v);
  typedef void (APIENTRY *TShaderBinary)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
  typedef void (APIENTRY *TUseProgramStages)(GLuint pipeline, GLbitfield stages, GLuint program);
  typedef void (APIENTRY *TValidateProgramPipeline)(GLuint pipeline);
  typedef void (APIENTRY *TVertexAttribL1d)(GLuint index, GLdouble x);
  typedef void (APIENTRY *TVertexAttribL1dv)(GLuint index, const GLdouble *v);
  typedef void (APIENTRY *TVertexAttribL2d)(GLuint index, GLdouble x, GLdouble y);
  typedef void (APIENTRY *TVertexAttribL2dv)(GLuint index, const GLdouble *v);
  typedef void (APIENTRY *TVertexAttribL3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
  typedef void (APIENTRY *TVertexAttribL3dv)(GLuint index, const GLdouble *v);
  typedef void (APIENTRY *TVertexAttribL4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  typedef void (APIENTRY *TVertexAttribL4dv)(GLuint index, const GLdouble *v);
  typedef void (APIENTRY *TVertexAttribLPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
  typedef void (APIENTRY *TViewportArrayv)(GLuint first, GLsizei count, const GLfloat *v);
  typedef void (APIENTRY *TViewportIndexedf)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
  typedef void (APIENTRY *TViewportIndexedfv)(GLuint index, const GLfloat *v);

  // GL_VERSION_4_2
  typedef void (APIENTRY *TBindImageTexture)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
  typedef void (APIENTRY *TDrawArraysInstancedBaseInstance)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
  typedef void (APIENTRY *TDrawElementsInstancedBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
  typedef void (APIENTRY *TDrawElementsInstancedBaseVertexBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
  typedef void (APIENTRY *TDrawTransformFeedbackInstanced)(GLenum mode, GLuint id, GLsizei instancecount);
  typedef void (APIENTRY *TDrawTransformFeedbackStreamInstanced)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
  typedef void (APIENTRY *TGetActiveAtomicCounterBufferiv)(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetInternalformativ)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
  typedef void (APIENTRY *TMemoryBarrier)(GLbitfield barriers);
  typedef void (APIENTRY *TTexStorage1D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
  typedef void (APIENTRY *TTexStorage2D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
  typedef void (APIENTRY *TTexStorage3D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);

  // GL_VERSION_4_3
  typedef void (APIENTRY *TBindVertexBuffer)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
  typedef void (APIENTRY *TClearBufferData)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
  typedef void (APIENTRY *TClearBufferSubData)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
  typedef void (APIENTRY *TCopyImageSubData)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
  typedef void (APIENTRY *TDebugMessageCallback)(TDebugCallback callback, const void *userParam);
  typedef void (APIENTRY *TDebugMessageControl)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
  typedef void (APIENTRY *TDebugMessageInsert)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
  typedef void (APIENTRY *TDispatchCompute)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
  typedef void (APIENTRY *TDispatchComputeIndirect)(GLintptr indirect);
  typedef void (APIENTRY *TFramebufferParameteri)(GLenum target, GLenum pname, GLint param);
  typedef GLuint (APIENTRY *TGetDebugMessageLog)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
  typedef void (APIENTRY *TGetFramebufferParameteriv)(GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetInternalformati64v)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
  typedef void (APIENTRY *TGetObjectLabel)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
  typedef void (APIENTRY *TGetObjectPtrLabel)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
  typedef void (APIENTRY *TGetProgramInterfaceiv)(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
  typedef GLuint (APIENTRY *TGetProgramResourceIndex)(GLuint program, GLenum programInterface, const GLchar *name);
  typedef GLint (APIENTRY *TGetProgramResourceLocation)(GLuint program, GLenum programInterface, const GLchar *name);
  typedef GLint (APIENTRY *TGetProgramResourceLocationIndex)(GLuint program, GLenum programInterface, const GLchar *name);
  typedef void (APIENTRY *TGetProgramResourceName)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
  typedef void (APIENTRY *TGetProgramResourceiv)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
  typedef void (APIENTRY *TInvalidateBufferData)(GLuint buffer);
  typedef void (APIENTRY *TInvalidateBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr length);
  typedef void (APIENTRY *TInvalidateFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
  typedef void (APIENTRY *TInvalidateSubFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
  typedef void (APIENTRY *TInvalidateTexImage)(GLuint texture, GLint level);
  typedef void (APIENTRY *TInvalidateTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
  typedef void (APIENTRY *TMultiDrawArraysIndirect)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
  typedef void (APIENTRY *TMultiDrawElementsIndirect)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
  typedef void (APIENTRY *TObjectLabel)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
  typedef void (APIENTRY *TObjectPtrLabel)(const void *ptr, GLsizei length, const GLchar *label);
  typedef void (APIENTRY *TPopDebugGroup)(void);
  typedef void (APIENTRY *TPushDebugGroup)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
  typedef void (APIENTRY *TShaderStorageBlockBinding)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
  typedef void (APIENTRY *TTexBufferRange)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
  typedef void (APIENTRY *TTexStorage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
  typedef void (APIENTRY *TTexStorage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
  typedef void (APIENTRY *TTextureView)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
  typedef void (APIENTRY *TVertexAttribBinding)(GLuint attribindex, GLuint bindingindex);
  typedef void (APIENTRY *TVertexAttribFormat)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
  typedef void (APIENTRY *TVertexAttribIFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
  typedef void (APIENTRY *TVertexAttribLFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
  typedef void (APIENTRY *TVertexBindingDivisor)(GLuint bindingindex, GLuint divisor);

  // GL_VERSION_4_4
  typedef void (APIENTRY *TBindBuffersBase)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
  typedef void (APIENTRY *TBindBuffersRange)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
  typedef void (APIENTRY *TBindImageTextures)(GLuint first, GLsizei count, const GLuint *textures);
  typedef void (APIENTRY *TBindSamplers)(GLuint first, GLsizei count, const GLuint *samplers);
  typedef void (APIENTRY *TBindTextures)(GLuint first, GLsizei count, const GLuint *textures);
  typedef void (APIENTRY *TBindVertexBuffers)(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
  typedef void (APIENTRY *TBufferStorage)(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
  typedef void (APIENTRY *TClearTexImage)(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
  typedef void (APIENTRY *TClearTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);

  // GL_VERSION_4_5
  typedef void (APIENTRY *TBindTextureUnit)(GLuint unit, GLuint texture);
  typedef void (APIENTRY *TBlitNamedFramebuffer)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
  typedef GLenum (APIENTRY *TCheckNamedFramebufferStatus)(GLuint framebuffer, GLenum target);
  typedef void (APIENTRY *TClearNamedBufferData)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
  typedef void (APIENTRY *TClearNamedBufferSubData)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
  typedef void (APIENTRY *TClearNamedFramebufferfi)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
  typedef void (APIENTRY *TClearNamedFramebufferfv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
  typedef void (APIENTRY *TClearNamedFramebufferiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
  typedef void (APIENTRY *TClearNamedFramebufferuiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
  typedef void (APIENTRY *TClipControl)(GLenum origin, GLenum depth);
  typedef void (APIENTRY *TCompressedTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
  typedef void (APIENTRY *TCompressedTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
  typedef void (APIENTRY *TCompressedTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
  typedef void (APIENTRY *TCopyNamedBufferSubData)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
  typedef void (APIENTRY *TCopyTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
  typedef void (APIENTRY *TCopyTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  typedef void (APIENTRY *TCopyTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  typedef void (APIENTRY *TCreateBuffers)(GLsizei n, GLuint *buffers);
  typedef void (APIENTRY *TCreateFramebuffers)(GLsizei n, GLuint *framebuffers);
  typedef void (APIENTRY *TCreateProgramPipelines)(GLsizei n, GLuint *pipelines);
  typedef void (APIENTRY *TCreateQueries)(GLenum target, GLsizei n, GLuint *ids);
  typedef void (APIENTRY *TCreateRenderbuffers)(GLsizei n, GLuint *renderbuffers);
  typedef void (APIENTRY *TCreateSamplers)(GLsizei n, GLuint *samplers);
  typedef void (APIENTRY *TCreateTextures)(GLenum target, GLsizei n, GLuint *textures);
  typedef void (APIENTRY *TCreateTransformFeedbacks)(GLsizei n, GLuint *ids);
  typedef void (APIENTRY *TCreateVertexArrays)(GLsizei n, GLuint *arrays);
  typedef void (APIENTRY *TDisableVertexArrayAttrib)(GLuint vaobj, GLuint index);
  typedef void (APIENTRY *TEnableVertexArrayAttrib)(GLuint vaobj, GLuint index);
  typedef void (APIENTRY *TFlushMappedNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length);
  typedef void (APIENTRY *TGenerateTextureMipmap)(GLuint texture);
  typedef void (APIENTRY *TGetCompressedTextureImage)(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
  typedef void (APIENTRY *TGetCompressedTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
  typedef GLenum (APIENTRY *TGetGraphicsResetStatus)(void);
  typedef void (APIENTRY *TGetNamedBufferParameteri64v)(GLuint buffer, GLenum pname, GLint64 *params);
  typedef void (APIENTRY *TGetNamedBufferParameteriv)(GLuint buffer, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetNamedBufferPointerv)(GLuint buffer, GLenum pname, void **params);
  typedef void (APIENTRY *TGetNamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
  typedef void (APIENTRY *TGetNamedFramebufferAttachmentParameteriv)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetNamedFramebufferParameteriv)(GLuint framebuffer, GLenum pname, GLint *param);
  typedef void (APIENTRY *TGetNamedRenderbufferParameteriv)(GLuint renderbuffer, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetQueryBufferObjecti64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
  typedef void (APIENTRY *TGetQueryBufferObjectiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
  typedef void (APIENTRY *TGetQueryBufferObjectui64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
  typedef void (APIENTRY *TGetQueryBufferObjectuiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
  typedef void (APIENTRY *TGetTextureImage)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
  typedef void (APIENTRY *TGetTextureLevelParameterfv)(GLuint texture, GLint level, GLenum pname, GLfloat *params);
  typedef void (APIENTRY *TGetTextureLevelParameteriv)(GLuint texture, GLint level, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetTextureParameterIiv)(GLuint texture, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetTextureParameterIuiv)(GLuint texture, GLenum pname, GLuint *params);
  typedef void (APIENTRY *TGetTextureParameterfv)(GLuint texture, GLenum pname, GLfloat *params);
  typedef void (APIENTRY *TGetTextureParameteriv)(GLuint texture, GLenum pname, GLint *params);
  typedef void (APIENTRY *TGetTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
  typedef void (APIENTRY *TGetTransformFeedbacki64_v)(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
  typedef void (APIENTRY *TGetTransformFeedbacki_v)(GLuint xfb, GLenum pname, GLuint index, GLint *param);
  typedef void (APIENTRY *TGetTransformFeedbackiv)(GLuint xfb, GLenum pname, GLint *param);
  typedef void (APIENTRY *TGetVertexArrayIndexed64iv)(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
  typedef void (APIENTRY *TGetVertexArrayIndexediv)(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
  typedef void (APIENTRY *TGetVertexArrayiv)(GLuint vaobj, GLenum pname, GLint *param);
  typedef void (APIENTRY *TGetnCompressedTexImage)(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
  typedef void (APIENTRY *TGetnTexImage)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
  typedef void (APIENTRY *TGetnUniformdv)(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
  typedef void (APIENTRY *TGetnUniformfv)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
  typedef void (APIENTRY *TGetnUniformiv)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
  typedef void (APIENTRY *TGetnUniformuiv)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
  typedef void (APIENTRY *TInvalidateNamedFramebufferData)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
  typedef void (APIENTRY *TInvalidateNamedFramebufferSubData)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
  typedef void *(APIENTRY *TMapNamedBuffer)(GLuint buffer, GLenum access);
  typedef void *(APIENTRY *TMapNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
  typedef void (APIENTRY *TMemoryBarrierByRegion)(GLbitfield barriers);
  typedef void (APIENTRY *TNamedBufferData)(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
  typedef void (APIENTRY *TNamedBufferStorage)(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
  typedef void (APIENTRY *TNamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
  typedef void (APIENTRY *TNamedFramebufferDrawBuffer)(GLuint framebuffer, GLenum buf);
  typedef void (APIENTRY *TNamedFramebufferDrawBuffers)(GLuint framebuffer, GLsizei n, const GLenum *bufs);
  typedef void (APIENTRY *TNamedFramebufferParameteri)(GLuint framebuffer, GLenum pname, GLint param);
  typedef void (APIENTRY *TNamedFramebufferReadBuffer)(GLuint framebuffer, GLenum src);
  typedef void (APIENTRY *TNamedFramebufferRenderbuffer)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
  typedef void (APIENTRY *TNamedFramebufferTexture)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
  typedef void (APIENTRY *TNamedFramebufferTextureLayer)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
  typedef void (APIENTRY *TNamedRenderbufferStorage)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
  typedef void (APIENTRY *TNamedRenderbufferStorageMultisample)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
  typedef void (APIENTRY *TReadnPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
  typedef void (APIENTRY *TTextureBarrier)(void);
  typedef void (APIENTRY *TTextureBuffer)(GLuint texture, GLenum internalformat, GLuint buffer);
  typedef void (APIENTRY *TTextureBufferRange)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
  typedef void (APIENTRY *TTextureParameterIiv)(GLuint texture, GLenum pname, const GLint *params);
  typedef void (APIENTRY *TTextureParameterIuiv)(GLuint texture, GLenum pname, const GLuint *params);
  typedef void (APIENTRY *TTextureParameterf)(GLuint texture, GLenum pname, GLfloat param);
  typedef void (APIENTRY *TTextureParameterfv)(GLuint texture, GLenum pname, const GLfloat *param);
  typedef void (APIENTRY *TTextureParameteri)(GLuint texture, GLenum pname, GLint param);
  typedef void (APIENTRY *TTextureParameteriv)(GLuint texture, GLenum pname, const GLint *param);
  typedef void (APIENTRY *TTextureStorage1D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
  typedef void (APIENTRY *TTextureStorage2D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
  typedef void (APIENTRY *TTextureStorage2DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
  typedef void (APIENTRY *TTextureStorage3D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
  typedef void (APIENTRY *TTextureStorage3DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
  typedef void (APIENTRY *TTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
  typedef void (APIENTRY *TTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
  typedef void (APIENTRY *TTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
  typedef void (APIENTRY *TTransformFeedbackBufferBase)(GLuint xfb, GLuint index, GLuint buffer);
  typedef void (APIENTRY *TTransformFeedbackBufferRange)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
  typedef GLboolean (APIENTRY *TUnmapNamedBuffer)(GLuint buffer);
  typedef void (APIENTRY *TVertexArrayAttribBinding)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
  typedef void (APIENTRY *TVertexArrayAttribFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
  typedef void (APIENTRY *TVertexArrayAttribIFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
  typedef void (APIENTRY *TVertexArrayAttribLFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
  typedef void (APIENTRY *TVertexArrayBindingDivisor)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
  typedef void (APIENTRY *TVertexArrayElementBuffer)(GLuint vaobj, GLuint buffer);
  typedef void (APIENTRY *TVertexArrayVertexBuffer)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
  typedef void (APIENTRY *TVertexArrayVertexBuffers)(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
}
//-----------------------------------------------------------------------------
#endif // OPENGLTYPES_H
